// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "github.com/apache/thrift/lib/go/thrift"
        "social_network"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void ComposePost(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := social_network.NewComposePostServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "ComposePost":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "ComposePost requires 8 args")
      flag.Usage()
    }
    argvalue0, err123 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err123 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err125 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err125 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg127 := flag.Arg(5)
    mbTrans128 := thrift.NewTMemoryBufferLen(len(arg127))
    defer mbTrans128.Close()
    _, err129 := mbTrans128.WriteString(arg127)
    if err129 != nil { 
      Usage()
      return
    }
    factory130 := thrift.NewTJSONProtocolFactory()
    jsProt131 := factory130.GetProtocol(mbTrans128)
    containerStruct4 := social_network.NewComposePostServiceComposePostArgs()
    err132 := containerStruct4.ReadField5(jsProt131)
    if err132 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.MediaIds
    value4 := argvalue4
    arg133 := flag.Arg(6)
    mbTrans134 := thrift.NewTMemoryBufferLen(len(arg133))
    defer mbTrans134.Close()
    _, err135 := mbTrans134.WriteString(arg133)
    if err135 != nil { 
      Usage()
      return
    }
    factory136 := thrift.NewTJSONProtocolFactory()
    jsProt137 := factory136.GetProtocol(mbTrans134)
    containerStruct5 := social_network.NewComposePostServiceComposePostArgs()
    err138 := containerStruct5.ReadField6(jsProt137)
    if err138 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.MediaTypes
    value5 := argvalue5
    tmp6, err := (strconv.Atoi(flag.Arg(7)))
    if err != nil {
      Usage()
     return
    }
    argvalue6 := social_network.PostType(tmp6)
    value6 := argvalue6
    arg139 := flag.Arg(8)
    mbTrans140 := thrift.NewTMemoryBufferLen(len(arg139))
    defer mbTrans140.Close()
    _, err141 := mbTrans140.WriteString(arg139)
    if err141 != nil { 
      Usage()
      return
    }
    factory142 := thrift.NewTJSONProtocolFactory()
    jsProt143 := factory142.GetProtocol(mbTrans140)
    containerStruct7 := social_network.NewComposePostServiceComposePostArgs()
    err144 := containerStruct7.ReadField8(jsProt143)
    if err144 != nil {
      Usage()
      return
    }
    argvalue7 := containerStruct7.Carrier
    value7 := argvalue7
    fmt.Print(client.ComposePost(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
