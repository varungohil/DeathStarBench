// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "github.com/apache/thrift/lib/go/thrift"
        "social_network"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "   GetFollowers(i64 req_id, i64 user_id,  carrier)")
  fmt.Fprintln(os.Stderr, "   GetFollowees(i64 req_id, i64 user_id,  carrier)")
  fmt.Fprintln(os.Stderr, "  void Follow(i64 req_id, i64 user_id, i64 followee_id,  carrier)")
  fmt.Fprintln(os.Stderr, "  void Unfollow(i64 req_id, i64 user_id, i64 followee_id,  carrier)")
  fmt.Fprintln(os.Stderr, "  void FollowWithUsername(i64 req_id, string user_usernmae, string followee_username,  carrier)")
  fmt.Fprintln(os.Stderr, "  void UnfollowWithUsername(i64 req_id, string user_usernmae, string followee_username,  carrier)")
  fmt.Fprintln(os.Stderr, "  void InsertUser(i64 req_id, i64 user_id,  carrier)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := social_network.NewSocialGraphServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "GetFollowers":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetFollowers requires 3 args")
      flag.Usage()
    }
    argvalue0, err296 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err296 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err297 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err297 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg298 := flag.Arg(3)
    mbTrans299 := thrift.NewTMemoryBufferLen(len(arg298))
    defer mbTrans299.Close()
    _, err300 := mbTrans299.WriteString(arg298)
    if err300 != nil { 
      Usage()
      return
    }
    factory301 := thrift.NewTJSONProtocolFactory()
    jsProt302 := factory301.GetProtocol(mbTrans299)
    containerStruct2 := social_network.NewSocialGraphServiceGetFollowersArgs()
    err303 := containerStruct2.ReadField3(jsProt302)
    if err303 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Carrier
    value2 := argvalue2
    fmt.Print(client.GetFollowers(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "GetFollowees":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetFollowees requires 3 args")
      flag.Usage()
    }
    argvalue0, err304 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err304 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err305 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err305 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg306 := flag.Arg(3)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil { 
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    containerStruct2 := social_network.NewSocialGraphServiceGetFolloweesArgs()
    err311 := containerStruct2.ReadField3(jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Carrier
    value2 := argvalue2
    fmt.Print(client.GetFollowees(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "Follow":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Follow requires 4 args")
      flag.Usage()
    }
    argvalue0, err312 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err312 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err313 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err313 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err314 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err314 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg315 := flag.Arg(4)
    mbTrans316 := thrift.NewTMemoryBufferLen(len(arg315))
    defer mbTrans316.Close()
    _, err317 := mbTrans316.WriteString(arg315)
    if err317 != nil { 
      Usage()
      return
    }
    factory318 := thrift.NewTJSONProtocolFactory()
    jsProt319 := factory318.GetProtocol(mbTrans316)
    containerStruct3 := social_network.NewSocialGraphServiceFollowArgs()
    err320 := containerStruct3.ReadField4(jsProt319)
    if err320 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Carrier
    value3 := argvalue3
    fmt.Print(client.Follow(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "Unfollow":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "Unfollow requires 4 args")
      flag.Usage()
    }
    argvalue0, err321 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err321 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err322 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err322 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err323 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err323 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg324 := flag.Arg(4)
    mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
    defer mbTrans325.Close()
    _, err326 := mbTrans325.WriteString(arg324)
    if err326 != nil { 
      Usage()
      return
    }
    factory327 := thrift.NewTJSONProtocolFactory()
    jsProt328 := factory327.GetProtocol(mbTrans325)
    containerStruct3 := social_network.NewSocialGraphServiceUnfollowArgs()
    err329 := containerStruct3.ReadField4(jsProt328)
    if err329 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Carrier
    value3 := argvalue3
    fmt.Print(client.Unfollow(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "FollowWithUsername":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FollowWithUsername requires 4 args")
      flag.Usage()
    }
    argvalue0, err330 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err330 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg333 := flag.Arg(4)
    mbTrans334 := thrift.NewTMemoryBufferLen(len(arg333))
    defer mbTrans334.Close()
    _, err335 := mbTrans334.WriteString(arg333)
    if err335 != nil { 
      Usage()
      return
    }
    factory336 := thrift.NewTJSONProtocolFactory()
    jsProt337 := factory336.GetProtocol(mbTrans334)
    containerStruct3 := social_network.NewSocialGraphServiceFollowWithUsernameArgs()
    err338 := containerStruct3.ReadField4(jsProt337)
    if err338 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Carrier
    value3 := argvalue3
    fmt.Print(client.FollowWithUsername(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "UnfollowWithUsername":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UnfollowWithUsername requires 4 args")
      flag.Usage()
    }
    argvalue0, err339 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err339 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg342 := flag.Arg(4)
    mbTrans343 := thrift.NewTMemoryBufferLen(len(arg342))
    defer mbTrans343.Close()
    _, err344 := mbTrans343.WriteString(arg342)
    if err344 != nil { 
      Usage()
      return
    }
    factory345 := thrift.NewTJSONProtocolFactory()
    jsProt346 := factory345.GetProtocol(mbTrans343)
    containerStruct3 := social_network.NewSocialGraphServiceUnfollowWithUsernameArgs()
    err347 := containerStruct3.ReadField4(jsProt346)
    if err347 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Carrier
    value3 := argvalue3
    fmt.Print(client.UnfollowWithUsername(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "InsertUser":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InsertUser requires 3 args")
      flag.Usage()
    }
    argvalue0, err348 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err348 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err349 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err349 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg350 := flag.Arg(3)
    mbTrans351 := thrift.NewTMemoryBufferLen(len(arg350))
    defer mbTrans351.Close()
    _, err352 := mbTrans351.WriteString(arg350)
    if err352 != nil { 
      Usage()
      return
    }
    factory353 := thrift.NewTJSONProtocolFactory()
    jsProt354 := factory353.GetProtocol(mbTrans351)
    containerStruct2 := social_network.NewSocialGraphServiceInsertUserArgs()
    err355 := containerStruct2.ReadField3(jsProt354)
    if err355 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Carrier
    value2 := argvalue2
    fmt.Print(client.InsertUser(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
