// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package social_network

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ErrorCode int64
const (
  ErrorCode_SE_CONNPOOL_TIMEOUT ErrorCode = 0
  ErrorCode_SE_THRIFT_CONN_ERROR ErrorCode = 1
  ErrorCode_SE_UNAUTHORIZED ErrorCode = 2
  ErrorCode_SE_MEMCACHED_ERROR ErrorCode = 3
  ErrorCode_SE_MONGODB_ERROR ErrorCode = 4
  ErrorCode_SE_REDIS_ERROR ErrorCode = 5
  ErrorCode_SE_THRIFT_HANDLER_ERROR ErrorCode = 6
  ErrorCode_SE_RABBITMQ_CONN_ERROR ErrorCode = 7
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_SE_CONNPOOL_TIMEOUT: return "SE_CONNPOOL_TIMEOUT"
  case ErrorCode_SE_THRIFT_CONN_ERROR: return "SE_THRIFT_CONN_ERROR"
  case ErrorCode_SE_UNAUTHORIZED: return "SE_UNAUTHORIZED"
  case ErrorCode_SE_MEMCACHED_ERROR: return "SE_MEMCACHED_ERROR"
  case ErrorCode_SE_MONGODB_ERROR: return "SE_MONGODB_ERROR"
  case ErrorCode_SE_REDIS_ERROR: return "SE_REDIS_ERROR"
  case ErrorCode_SE_THRIFT_HANDLER_ERROR: return "SE_THRIFT_HANDLER_ERROR"
  case ErrorCode_SE_RABBITMQ_CONN_ERROR: return "SE_RABBITMQ_CONN_ERROR"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "SE_CONNPOOL_TIMEOUT": return ErrorCode_SE_CONNPOOL_TIMEOUT, nil 
  case "SE_THRIFT_CONN_ERROR": return ErrorCode_SE_THRIFT_CONN_ERROR, nil 
  case "SE_UNAUTHORIZED": return ErrorCode_SE_UNAUTHORIZED, nil 
  case "SE_MEMCACHED_ERROR": return ErrorCode_SE_MEMCACHED_ERROR, nil 
  case "SE_MONGODB_ERROR": return ErrorCode_SE_MONGODB_ERROR, nil 
  case "SE_REDIS_ERROR": return ErrorCode_SE_REDIS_ERROR, nil 
  case "SE_THRIFT_HANDLER_ERROR": return ErrorCode_SE_THRIFT_HANDLER_ERROR, nil 
  case "SE_RABBITMQ_CONN_ERROR": return ErrorCode_SE_RABBITMQ_CONN_ERROR, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PostType int64
const (
  PostType_POST PostType = 0
  PostType_REPOST PostType = 1
  PostType_REPLY PostType = 2
  PostType_DM PostType = 3
)

func (p PostType) String() string {
  switch p {
  case PostType_POST: return "POST"
  case PostType_REPOST: return "REPOST"
  case PostType_REPLY: return "REPLY"
  case PostType_DM: return "DM"
  }
  return "<UNSET>"
}

func PostTypeFromString(s string) (PostType, error) {
  switch s {
  case "POST": return PostType_POST, nil 
  case "REPOST": return PostType_REPOST, nil 
  case "REPLY": return PostType_REPLY, nil 
  case "DM": return PostType_DM, nil 
  }
  return PostType(0), fmt.Errorf("not a valid PostType string")
}


func PostTypePtr(v PostType) *PostType { return &v }

func (p PostType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PostType) UnmarshalText(text []byte) error {
q, err := PostTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PostType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PostType(v)
return nil
}

func (p * PostType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - UserID
//  - FirstName
//  - LastName
//  - Username
//  - PasswordHashed
//  - Salt
type User struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  PasswordHashed string `thrift:"password_hashed,5" db:"password_hashed" json:"password_hashed"`
  Salt string `thrift:"salt,6" db:"salt" json:"salt"`
}

func NewUser() *User {
  return &User{}
}


func (p *User) GetUserID() int64 {
  return p.UserID
}

func (p *User) GetFirstName() string {
  return p.FirstName
}

func (p *User) GetLastName() string {
  return p.LastName
}

func (p *User) GetUsername() string {
  return p.Username
}

func (p *User) GetPasswordHashed() string {
  return p.PasswordHashed
}

func (p *User) GetSalt() string {
  return p.Salt
}
func (p *User) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *User)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *User)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *User)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *User)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *User)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PasswordHashed = v
}
  return nil
}

func (p *User)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Salt = v
}
  return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("User"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *User) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password_hashed", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password_hashed: ", p), err) }
  if err := oprot.WriteString(string(p.PasswordHashed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password_hashed (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password_hashed: ", p), err) }
  return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("salt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:salt: ", p), err) }
  if err := oprot.WriteString(string(p.Salt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.salt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:salt: ", p), err) }
  return err
}

func (p *User) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
type ServiceException struct {
  ErrorCode ErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewServiceException() *ServiceException {
  return &ServiceException{}
}


func (p *ServiceException) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *ServiceException) GetMessage() string {
  return p.Message
}
func (p *ServiceException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *ServiceException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ServiceException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServiceException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *ServiceException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *ServiceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceException(%+v)", *p)
}

func (p *ServiceException) Error() string {
  return p.String()
}

// Attributes:
//  - MediaID
//  - MediaType
type Media struct {
  MediaID int64 `thrift:"media_id,1" db:"media_id" json:"media_id"`
  MediaType string `thrift:"media_type,2" db:"media_type" json:"media_type"`
}

func NewMedia() *Media {
  return &Media{}
}


func (p *Media) GetMediaID() int64 {
  return p.MediaID
}

func (p *Media) GetMediaType() string {
  return p.MediaType
}
func (p *Media) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Media)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MediaID = v
}
  return nil
}

func (p *Media)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MediaType = v
}
  return nil
}

func (p *Media) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Media"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Media) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:media_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.MediaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:media_id: ", p), err) }
  return err
}

func (p *Media) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:media_type: ", p), err) }
  if err := oprot.WriteString(string(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.media_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:media_type: ", p), err) }
  return err
}

func (p *Media) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Media(%+v)", *p)
}

// Attributes:
//  - ShortenedURL
//  - ExpandedURL
type URL struct {
  ShortenedURL string `thrift:"shortened_url,1" db:"shortened_url" json:"shortened_url"`
  ExpandedURL string `thrift:"expanded_url,2" db:"expanded_url" json:"expanded_url"`
}

func NewURL() *URL {
  return &URL{}
}


func (p *URL) GetShortenedURL() string {
  return p.ShortenedURL
}

func (p *URL) GetExpandedURL() string {
  return p.ExpandedURL
}
func (p *URL) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *URL)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ShortenedURL = v
}
  return nil
}

func (p *URL)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExpandedURL = v
}
  return nil
}

func (p *URL) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Url"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *URL) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shortened_url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shortened_url: ", p), err) }
  if err := oprot.WriteString(string(p.ShortenedURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shortened_url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shortened_url: ", p), err) }
  return err
}

func (p *URL) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expanded_url", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:expanded_url: ", p), err) }
  if err := oprot.WriteString(string(p.ExpandedURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expanded_url (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:expanded_url: ", p), err) }
  return err
}

func (p *URL) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("URL(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Username
type UserMention struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewUserMention() *UserMention {
  return &UserMention{}
}


func (p *UserMention) GetUserID() int64 {
  return p.UserID
}

func (p *UserMention) GetUsername() string {
  return p.Username
}
func (p *UserMention) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserMention)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserMention)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserMention) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserMention"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserMention) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *UserMention) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserMention) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserMention(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Username
type Creator struct {
  UserID int64 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewCreator() *Creator {
  return &Creator{}
}


func (p *Creator) GetUserID() int64 {
  return p.UserID
}

func (p *Creator) GetUsername() string {
  return p.Username
}
func (p *Creator) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Creator)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *Creator)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *Creator) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Creator"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Creator) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *Creator) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *Creator) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Creator(%+v)", *p)
}

// Attributes:
//  - Text
//  - UserMentions
//  - Urls
type TextServiceReturn struct {
  Text string `thrift:"text,1" db:"text" json:"text"`
  UserMentions []*UserMention `thrift:"user_mentions,2" db:"user_mentions" json:"user_mentions"`
  Urls []*URL `thrift:"urls,3" db:"urls" json:"urls"`
}

func NewTextServiceReturn() *TextServiceReturn {
  return &TextServiceReturn{}
}


func (p *TextServiceReturn) GetText() string {
  return p.Text
}

func (p *TextServiceReturn) GetUserMentions() []*UserMention {
  return p.UserMentions
}

func (p *TextServiceReturn) GetUrls() []*URL {
  return p.Urls
}
func (p *TextServiceReturn) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceReturn)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TextServiceReturn)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserMention, 0, size)
  p.UserMentions =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &UserMention{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.UserMentions = append(p.UserMentions, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TextServiceReturn)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*URL, 0, size)
  p.Urls =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &URL{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Urls = append(p.Urls, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TextServiceReturn) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TextServiceReturn"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceReturn) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:text: ", p), err) }
  return err
}

func (p *TextServiceReturn) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_mentions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_mentions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserMentions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserMentions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_mentions: ", p), err) }
  return err
}

func (p *TextServiceReturn) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("urls", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:urls: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Urls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Urls {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:urls: ", p), err) }
  return err
}

func (p *TextServiceReturn) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceReturn(%+v)", *p)
}

// Attributes:
//  - PostID
//  - Creator
//  - ReqID
//  - Text
//  - UserMentions
//  - Media
//  - Urls
//  - Timestamp
//  - PostType
type Post struct {
  PostID int64 `thrift:"post_id,1" db:"post_id" json:"post_id"`
  Creator *Creator `thrift:"creator,2" db:"creator" json:"creator"`
  ReqID int64 `thrift:"req_id,3" db:"req_id" json:"req_id"`
  Text string `thrift:"text,4" db:"text" json:"text"`
  UserMentions []*UserMention `thrift:"user_mentions,5" db:"user_mentions" json:"user_mentions"`
  Media []*Media `thrift:"media,6" db:"media" json:"media"`
  Urls []*URL `thrift:"urls,7" db:"urls" json:"urls"`
  Timestamp int64 `thrift:"timestamp,8" db:"timestamp" json:"timestamp"`
  PostType PostType `thrift:"post_type,9" db:"post_type" json:"post_type"`
}

func NewPost() *Post {
  return &Post{}
}


func (p *Post) GetPostID() int64 {
  return p.PostID
}
var Post_Creator_DEFAULT *Creator
func (p *Post) GetCreator() *Creator {
  if !p.IsSetCreator() {
    return Post_Creator_DEFAULT
  }
return p.Creator
}

func (p *Post) GetReqID() int64 {
  return p.ReqID
}

func (p *Post) GetText() string {
  return p.Text
}

func (p *Post) GetUserMentions() []*UserMention {
  return p.UserMentions
}

func (p *Post) GetMedia() []*Media {
  return p.Media
}

func (p *Post) GetUrls() []*URL {
  return p.Urls
}

func (p *Post) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *Post) GetPostType() PostType {
  return p.PostType
}
func (p *Post) IsSetCreator() bool {
  return p.Creator != nil
}

func (p *Post) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Post)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *Post)  ReadField2(iprot thrift.TProtocol) error {
  p.Creator = &Creator{}
  if err := p.Creator.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
  }
  return nil
}

func (p *Post)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *Post)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Post)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserMention, 0, size)
  p.UserMentions =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &UserMention{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.UserMentions = append(p.UserMentions, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Post)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Media, 0, size)
  p.Media =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Media{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Media = append(p.Media, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Post)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*URL, 0, size)
  p.Urls =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &URL{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Urls = append(p.Urls, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Post)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *Post)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := PostType(v)
  p.PostType = temp
}
  return nil
}

func (p *Post) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Post"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Post) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:post_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:post_id: ", p), err) }
  return err
}

func (p *Post) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creator", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:creator: ", p), err) }
  if err := p.Creator.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:creator: ", p), err) }
  return err
}

func (p *Post) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:req_id: ", p), err) }
  return err
}

func (p *Post) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:text: ", p), err) }
  return err
}

func (p *Post) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_mentions", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_mentions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserMentions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserMentions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_mentions: ", p), err) }
  return err
}

func (p *Post) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:media: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Media)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Media {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:media: ", p), err) }
  return err
}

func (p *Post) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("urls", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:urls: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Urls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Urls {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:urls: ", p), err) }
  return err
}

func (p *Post) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:timestamp: ", p), err) }
  return err
}

func (p *Post) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_type", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:post_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PostType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_type (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:post_type: ", p), err) }
  return err
}

func (p *Post) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Post(%+v)", *p)
}

type UniqueIdService interface {
  // Parameters:
  //  - ReqID
  //  - PostType
  //  - Carrier
  ComposeUniqueId(ctx context.Context, req_id int64, post_type PostType, carrier map[string]string) (r int64, err error)
}

type UniqueIdServiceClient struct {
  c thrift.TClient
}

func NewUniqueIdServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUniqueIdServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUniqueIdServiceClient(c thrift.TClient) *UniqueIdServiceClient {
  return &UniqueIdServiceClient{
    c: c,
  }
}

func (p *UniqueIdServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - PostType
//  - Carrier
func (p *UniqueIdServiceClient) ComposeUniqueId(ctx context.Context, req_id int64, post_type PostType, carrier map[string]string) (r int64, err error) {
  var _args5 UniqueIdServiceComposeUniqueIdArgs
  _args5.ReqID = req_id
  _args5.PostType = post_type
  _args5.Carrier = carrier
  var _result6 UniqueIdServiceComposeUniqueIdResult
  if err = p.Client_().Call(ctx, "ComposeUniqueId", &_args5, &_result6); err != nil {
    return
  }
  switch {
  case _result6.Se!= nil:
    return r, _result6.Se
  }

  return _result6.GetSuccess(), nil
}

type UniqueIdServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UniqueIdService
}

func (p *UniqueIdServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UniqueIdServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UniqueIdServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUniqueIdServiceProcessor(handler UniqueIdService) *UniqueIdServiceProcessor {

  self7 := &UniqueIdServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self7.processorMap["ComposeUniqueId"] = &uniqueIdServiceProcessorComposeUniqueId{handler:handler}
return self7
}

func (p *UniqueIdServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x8.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x8

}

type uniqueIdServiceProcessorComposeUniqueId struct {
  handler UniqueIdService
}

func (p *uniqueIdServiceProcessorComposeUniqueId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UniqueIdServiceComposeUniqueIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposeUniqueId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UniqueIdServiceComposeUniqueIdResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.ComposeUniqueId(ctx, args.ReqID, args.PostType, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeUniqueId: " + err2.Error())
    oprot.WriteMessageBegin("ComposeUniqueId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ComposeUniqueId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - PostType
//  - Carrier
type UniqueIdServiceComposeUniqueIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostType PostType `thrift:"post_type,2" db:"post_type" json:"post_type"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUniqueIdServiceComposeUniqueIdArgs() *UniqueIdServiceComposeUniqueIdArgs {
  return &UniqueIdServiceComposeUniqueIdArgs{}
}


func (p *UniqueIdServiceComposeUniqueIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UniqueIdServiceComposeUniqueIdArgs) GetPostType() PostType {
  return p.PostType
}

func (p *UniqueIdServiceComposeUniqueIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UniqueIdServiceComposeUniqueIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PostType(v)
  p.PostType = temp
}
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.Carrier[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeUniqueId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PostType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_type: ", p), err) }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueIdServiceComposeUniqueIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UniqueIdServiceComposeUniqueIdResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUniqueIdServiceComposeUniqueIdResult() *UniqueIdServiceComposeUniqueIdResult {
  return &UniqueIdServiceComposeUniqueIdResult{}
}

var UniqueIdServiceComposeUniqueIdResult_Success_DEFAULT int64
func (p *UniqueIdServiceComposeUniqueIdResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return UniqueIdServiceComposeUniqueIdResult_Success_DEFAULT
  }
return *p.Success
}
var UniqueIdServiceComposeUniqueIdResult_Se_DEFAULT *ServiceException
func (p *UniqueIdServiceComposeUniqueIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UniqueIdServiceComposeUniqueIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UniqueIdServiceComposeUniqueIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeUniqueId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UniqueIdServiceComposeUniqueIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UniqueIdServiceComposeUniqueIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UniqueIdServiceComposeUniqueIdResult(%+v)", *p)
}


type TextService interface {
  // Parameters:
  //  - ReqID
  //  - Text
  //  - Carrier
  ComposeText(ctx context.Context, req_id int64, text string, carrier map[string]string) (r *TextServiceReturn, err error)
}

type TextServiceClient struct {
  c thrift.TClient
}

func NewTextServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TextServiceClient {
  return &TextServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTextServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TextServiceClient {
  return &TextServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTextServiceClient(c thrift.TClient) *TextServiceClient {
  return &TextServiceClient{
    c: c,
  }
}

func (p *TextServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - Text
//  - Carrier
func (p *TextServiceClient) ComposeText(ctx context.Context, req_id int64, text string, carrier map[string]string) (r *TextServiceReturn, err error) {
  var _args18 TextServiceComposeTextArgs
  _args18.ReqID = req_id
  _args18.Text = text
  _args18.Carrier = carrier
  var _result19 TextServiceComposeTextResult
  if err = p.Client_().Call(ctx, "ComposeText", &_args18, &_result19); err != nil {
    return
  }
  switch {
  case _result19.Se!= nil:
    return r, _result19.Se
  }

  return _result19.GetSuccess(), nil
}

type TextServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TextService
}

func (p *TextServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TextServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TextServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTextServiceProcessor(handler TextService) *TextServiceProcessor {

  self20 := &TextServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self20.processorMap["ComposeText"] = &textServiceProcessorComposeText{handler:handler}
return self20
}

func (p *TextServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x21 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x21.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x21

}

type textServiceProcessorComposeText struct {
  handler TextService
}

func (p *textServiceProcessorComposeText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TextServiceComposeTextArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposeText", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TextServiceComposeTextResult{}
var retval *TextServiceReturn
  var err2 error
  if retval, err2 = p.handler.ComposeText(ctx, args.ReqID, args.Text, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeText: " + err2.Error())
    oprot.WriteMessageBegin("ComposeText", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ComposeText", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Text
//  - Carrier
type TextServiceComposeTextArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Text string `thrift:"text,2" db:"text" json:"text"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewTextServiceComposeTextArgs() *TextServiceComposeTextArgs {
  return &TextServiceComposeTextArgs{}
}


func (p *TextServiceComposeTextArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *TextServiceComposeTextArgs) GetText() string {
  return p.Text
}

func (p *TextServiceComposeTextArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *TextServiceComposeTextArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceComposeTextArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *TextServiceComposeTextArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TextServiceComposeTextArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
var _val23 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.Carrier[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TextServiceComposeTextArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeText_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceComposeTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *TextServiceComposeTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *TextServiceComposeTextArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TextServiceComposeTextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceComposeTextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type TextServiceComposeTextResult struct {
  Success *TextServiceReturn `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewTextServiceComposeTextResult() *TextServiceComposeTextResult {
  return &TextServiceComposeTextResult{}
}

var TextServiceComposeTextResult_Success_DEFAULT *TextServiceReturn
func (p *TextServiceComposeTextResult) GetSuccess() *TextServiceReturn {
  if !p.IsSetSuccess() {
    return TextServiceComposeTextResult_Success_DEFAULT
  }
return p.Success
}
var TextServiceComposeTextResult_Se_DEFAULT *ServiceException
func (p *TextServiceComposeTextResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return TextServiceComposeTextResult_Se_DEFAULT
  }
return p.Se
}
func (p *TextServiceComposeTextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TextServiceComposeTextResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *TextServiceComposeTextResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TextServiceComposeTextResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TextServiceReturn{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TextServiceComposeTextResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *TextServiceComposeTextResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeText_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TextServiceComposeTextResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TextServiceComposeTextResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *TextServiceComposeTextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TextServiceComposeTextResult(%+v)", *p)
}


type UserService interface {
  // Parameters:
  //  - ReqID
  //  - FirstName
  //  - LastName
  //  - Username
  //  - Password
  //  - Carrier
  RegisterUser(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - FirstName
  //  - LastName
  //  - Username
  //  - Password
  //  - UserID
  //  - Carrier
  RegisterUserWithId(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, user_id int64, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Password
  //  - Carrier
  Login(ctx context.Context, req_id int64, username string, password string, carrier map[string]string) (r string, err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Username
  //  - Carrier
  ComposeCreatorWithUserId(ctx context.Context, req_id int64, user_id int64, username string, carrier map[string]string) (r *Creator, err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Carrier
  ComposeCreatorWithUsername(ctx context.Context, req_id int64, username string, carrier map[string]string) (r *Creator, err error)
  // Parameters:
  //  - ReqID
  //  - Username
  //  - Carrier
  GetUserId(ctx context.Context, req_id int64, username string, carrier map[string]string) (r int64, err error)
}

type UserServiceClient struct {
  c thrift.TClient
}

func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
  return &UserServiceClient{
    c: c,
  }
}

func (p *UserServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - Carrier
func (p *UserServiceClient) RegisterUser(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, carrier map[string]string) (err error) {
  var _args32 UserServiceRegisterUserArgs
  _args32.ReqID = req_id
  _args32.FirstName = first_name
  _args32.LastName = last_name
  _args32.Username = username
  _args32.Password = password
  _args32.Carrier = carrier
  var _result33 UserServiceRegisterUserResult
  if err = p.Client_().Call(ctx, "RegisterUser", &_args32, &_result33); err != nil {
    return
  }
  switch {
  case _result33.Se!= nil:
    return _result33.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - UserID
//  - Carrier
func (p *UserServiceClient) RegisterUserWithId(ctx context.Context, req_id int64, first_name string, last_name string, username string, password string, user_id int64, carrier map[string]string) (err error) {
  var _args34 UserServiceRegisterUserWithIdArgs
  _args34.ReqID = req_id
  _args34.FirstName = first_name
  _args34.LastName = last_name
  _args34.Username = username
  _args34.Password = password
  _args34.UserID = user_id
  _args34.Carrier = carrier
  var _result35 UserServiceRegisterUserWithIdResult
  if err = p.Client_().Call(ctx, "RegisterUserWithId", &_args34, &_result35); err != nil {
    return
  }
  switch {
  case _result35.Se!= nil:
    return _result35.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - Username
//  - Password
//  - Carrier
func (p *UserServiceClient) Login(ctx context.Context, req_id int64, username string, password string, carrier map[string]string) (r string, err error) {
  var _args36 UserServiceLoginArgs
  _args36.ReqID = req_id
  _args36.Username = username
  _args36.Password = password
  _args36.Carrier = carrier
  var _result37 UserServiceLoginResult
  if err = p.Client_().Call(ctx, "Login", &_args36, &_result37); err != nil {
    return
  }
  switch {
  case _result37.Se!= nil:
    return r, _result37.Se
  }

  return _result37.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Username
//  - Carrier
func (p *UserServiceClient) ComposeCreatorWithUserId(ctx context.Context, req_id int64, user_id int64, username string, carrier map[string]string) (r *Creator, err error) {
  var _args38 UserServiceComposeCreatorWithUserIdArgs
  _args38.ReqID = req_id
  _args38.UserID = user_id
  _args38.Username = username
  _args38.Carrier = carrier
  var _result39 UserServiceComposeCreatorWithUserIdResult
  if err = p.Client_().Call(ctx, "ComposeCreatorWithUserId", &_args38, &_result39); err != nil {
    return
  }
  switch {
  case _result39.Se!= nil:
    return r, _result39.Se
  }

  return _result39.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - Username
//  - Carrier
func (p *UserServiceClient) ComposeCreatorWithUsername(ctx context.Context, req_id int64, username string, carrier map[string]string) (r *Creator, err error) {
  var _args40 UserServiceComposeCreatorWithUsernameArgs
  _args40.ReqID = req_id
  _args40.Username = username
  _args40.Carrier = carrier
  var _result41 UserServiceComposeCreatorWithUsernameResult
  if err = p.Client_().Call(ctx, "ComposeCreatorWithUsername", &_args40, &_result41); err != nil {
    return
  }
  switch {
  case _result41.Se!= nil:
    return r, _result41.Se
  }

  return _result41.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - Username
//  - Carrier
func (p *UserServiceClient) GetUserId(ctx context.Context, req_id int64, username string, carrier map[string]string) (r int64, err error) {
  var _args42 UserServiceGetUserIdArgs
  _args42.ReqID = req_id
  _args42.Username = username
  _args42.Carrier = carrier
  var _result43 UserServiceGetUserIdResult
  if err = p.Client_().Call(ctx, "GetUserId", &_args42, &_result43); err != nil {
    return
  }
  switch {
  case _result43.Se!= nil:
    return r, _result43.Se
  }

  return _result43.GetSuccess(), nil
}

type UserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

  self44 := &UserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self44.processorMap["RegisterUser"] = &userServiceProcessorRegisterUser{handler:handler}
  self44.processorMap["RegisterUserWithId"] = &userServiceProcessorRegisterUserWithId{handler:handler}
  self44.processorMap["Login"] = &userServiceProcessorLogin{handler:handler}
  self44.processorMap["ComposeCreatorWithUserId"] = &userServiceProcessorComposeCreatorWithUserId{handler:handler}
  self44.processorMap["ComposeCreatorWithUsername"] = &userServiceProcessorComposeCreatorWithUsername{handler:handler}
  self44.processorMap["GetUserId"] = &userServiceProcessorGetUserId{handler:handler}
return self44
}

func (p *UserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x45 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x45.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x45

}

type userServiceProcessorRegisterUser struct {
  handler UserService
}

func (p *userServiceProcessorRegisterUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceRegisterUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RegisterUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceRegisterUserResult{}
  var err2 error
  if err2 = p.handler.RegisterUser(ctx, args.ReqID, args.FirstName, args.LastName, args.Username, args.Password, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterUser: " + err2.Error())
    oprot.WriteMessageBegin("RegisterUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RegisterUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorRegisterUserWithId struct {
  handler UserService
}

func (p *userServiceProcessorRegisterUserWithId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceRegisterUserWithIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RegisterUserWithId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceRegisterUserWithIdResult{}
  var err2 error
  if err2 = p.handler.RegisterUserWithId(ctx, args.ReqID, args.FirstName, args.LastName, args.Username, args.Password, args.UserID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterUserWithId: " + err2.Error())
    oprot.WriteMessageBegin("RegisterUserWithId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("RegisterUserWithId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorLogin struct {
  handler UserService
}

func (p *userServiceProcessorLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceLoginResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Login(ctx, args.ReqID, args.Username, args.Password, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Login: " + err2.Error())
    oprot.WriteMessageBegin("Login", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Login", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorComposeCreatorWithUserId struct {
  handler UserService
}

func (p *userServiceProcessorComposeCreatorWithUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceComposeCreatorWithUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposeCreatorWithUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceComposeCreatorWithUserIdResult{}
var retval *Creator
  var err2 error
  if retval, err2 = p.handler.ComposeCreatorWithUserId(ctx, args.ReqID, args.UserID, args.Username, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeCreatorWithUserId: " + err2.Error())
    oprot.WriteMessageBegin("ComposeCreatorWithUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ComposeCreatorWithUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorComposeCreatorWithUsername struct {
  handler UserService
}

func (p *userServiceProcessorComposeCreatorWithUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceComposeCreatorWithUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposeCreatorWithUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceComposeCreatorWithUsernameResult{}
var retval *Creator
  var err2 error
  if retval, err2 = p.handler.ComposeCreatorWithUsername(ctx, args.ReqID, args.Username, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeCreatorWithUsername: " + err2.Error())
    oprot.WriteMessageBegin("ComposeCreatorWithUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ComposeCreatorWithUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorGetUserId struct {
  handler UserService
}

func (p *userServiceProcessorGetUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceGetUserIdResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetUserId(ctx, args.ReqID, args.Username, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserId: " + err2.Error())
    oprot.WriteMessageBegin("GetUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - Carrier
type UserServiceRegisterUserArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  Password string `thrift:"password,5" db:"password" json:"password"`
  Carrier map[string]string `thrift:"carrier,6" db:"carrier" json:"carrier"`
}

func NewUserServiceRegisterUserArgs() *UserServiceRegisterUserArgs {
  return &UserServiceRegisterUserArgs{}
}


func (p *UserServiceRegisterUserArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceRegisterUserArgs) GetFirstName() string {
  return p.FirstName
}

func (p *UserServiceRegisterUserArgs) GetLastName() string {
  return p.LastName
}

func (p *UserServiceRegisterUserArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceRegisterUserArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceRegisterUserArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceRegisterUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceRegisterUserArgs)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key46 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key46 = v
}
var _val47 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val47 = v
}
    p.Carrier[_key46] = _val47
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceRegisterUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceRegisterUserResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceRegisterUserResult() *UserServiceRegisterUserResult {
  return &UserServiceRegisterUserResult{}
}

var UserServiceRegisterUserResult_Se_DEFAULT *ServiceException
func (p *UserServiceRegisterUserResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceRegisterUserResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceRegisterUserResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceRegisterUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceRegisterUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceRegisterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - FirstName
//  - LastName
//  - Username
//  - Password
//  - UserID
//  - Carrier
type UserServiceRegisterUserWithIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  FirstName string `thrift:"first_name,2" db:"first_name" json:"first_name"`
  LastName string `thrift:"last_name,3" db:"last_name" json:"last_name"`
  Username string `thrift:"username,4" db:"username" json:"username"`
  Password string `thrift:"password,5" db:"password" json:"password"`
  UserID int64 `thrift:"user_id,6" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,7" db:"carrier" json:"carrier"`
}

func NewUserServiceRegisterUserWithIdArgs() *UserServiceRegisterUserWithIdArgs {
  return &UserServiceRegisterUserWithIdArgs{}
}


func (p *UserServiceRegisterUserWithIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceRegisterUserWithIdArgs) GetFirstName() string {
  return p.FirstName
}

func (p *UserServiceRegisterUserWithIdArgs) GetLastName() string {
  return p.LastName
}

func (p *UserServiceRegisterUserWithIdArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceRegisterUserWithIdArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceRegisterUserWithIdArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserServiceRegisterUserWithIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceRegisterUserWithIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstName = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastName = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs)  ReadField7(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key48 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key48 = v
}
var _val49 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val49 = v
}
    p.Carrier[_key48] = _val49
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterUserWithId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserWithIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:first_name: ", p), err) }
  if err := oprot.WriteString(string(p.FirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:first_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:last_name: ", p), err) }
  if err := oprot.WriteString(string(p.LastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:last_name: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:user_id: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:carrier: ", p), err) }
  return err
}

func (p *UserServiceRegisterUserWithIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserWithIdArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserServiceRegisterUserWithIdResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceRegisterUserWithIdResult() *UserServiceRegisterUserWithIdResult {
  return &UserServiceRegisterUserWithIdResult{}
}

var UserServiceRegisterUserWithIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceRegisterUserWithIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceRegisterUserWithIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceRegisterUserWithIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceRegisterUserWithIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterUserWithId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceRegisterUserWithIdResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceRegisterUserWithIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceRegisterUserWithIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Password
//  - Carrier
type UserServiceLoginArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Password string `thrift:"password,3" db:"password" json:"password"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewUserServiceLoginArgs() *UserServiceLoginArgs {
  return &UserServiceLoginArgs{}
}


func (p *UserServiceLoginArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceLoginArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceLoginArgs) GetPassword() string {
  return p.Password
}

func (p *UserServiceLoginArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *UserServiceLoginArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key50 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key50 = v
}
var _val51 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val51 = v
}
    p.Carrier[_key50] = _val51
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *UserServiceLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceLoginResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceLoginResult() *UserServiceLoginResult {
  return &UserServiceLoginResult{}
}

var UserServiceLoginResult_Success_DEFAULT string
func (p *UserServiceLoginResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return UserServiceLoginResult_Success_DEFAULT
  }
return *p.Success
}
var UserServiceLoginResult_Se_DEFAULT *ServiceException
func (p *UserServiceLoginResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceLoginResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceLoginResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserServiceLoginResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Login_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceLoginResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Username
//  - Carrier
type UserServiceComposeCreatorWithUserIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Username string `thrift:"username,3" db:"username" json:"username"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewUserServiceComposeCreatorWithUserIdArgs() *UserServiceComposeCreatorWithUserIdArgs {
  return &UserServiceComposeCreatorWithUserIdArgs{}
}


func (p *UserServiceComposeCreatorWithUserIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceComposeCreatorWithUserIdArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserServiceComposeCreatorWithUserIdArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceComposeCreatorWithUserIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceComposeCreatorWithUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key52 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key52 = v
}
var _val53 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val53 = v
}
    p.Carrier[_key52] = _val53
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeCreatorWithUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:username: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceComposeCreatorWithUserIdResult struct {
  Success *Creator `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceComposeCreatorWithUserIdResult() *UserServiceComposeCreatorWithUserIdResult {
  return &UserServiceComposeCreatorWithUserIdResult{}
}

var UserServiceComposeCreatorWithUserIdResult_Success_DEFAULT *Creator
func (p *UserServiceComposeCreatorWithUserIdResult) GetSuccess() *Creator {
  if !p.IsSetSuccess() {
    return UserServiceComposeCreatorWithUserIdResult_Success_DEFAULT
  }
return p.Success
}
var UserServiceComposeCreatorWithUserIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceComposeCreatorWithUserIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceComposeCreatorWithUserIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceComposeCreatorWithUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Creator{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeCreatorWithUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUserIdResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Carrier
type UserServiceComposeCreatorWithUsernameArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserServiceComposeCreatorWithUsernameArgs() *UserServiceComposeCreatorWithUsernameArgs {
  return &UserServiceComposeCreatorWithUsernameArgs{}
}


func (p *UserServiceComposeCreatorWithUsernameArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceComposeCreatorWithUsernameArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceComposeCreatorWithUsernameArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceComposeCreatorWithUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key54 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key54 = v
}
var _val55 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val55 = v
}
    p.Carrier[_key54] = _val55
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeCreatorWithUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceComposeCreatorWithUsernameResult struct {
  Success *Creator `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceComposeCreatorWithUsernameResult() *UserServiceComposeCreatorWithUsernameResult {
  return &UserServiceComposeCreatorWithUsernameResult{}
}

var UserServiceComposeCreatorWithUsernameResult_Success_DEFAULT *Creator
func (p *UserServiceComposeCreatorWithUsernameResult) GetSuccess() *Creator {
  if !p.IsSetSuccess() {
    return UserServiceComposeCreatorWithUsernameResult_Success_DEFAULT
  }
return p.Success
}
var UserServiceComposeCreatorWithUsernameResult_Se_DEFAULT *ServiceException
func (p *UserServiceComposeCreatorWithUsernameResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceComposeCreatorWithUsernameResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceComposeCreatorWithUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Creator{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeCreatorWithUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceComposeCreatorWithUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceComposeCreatorWithUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceComposeCreatorWithUsernameResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Username
//  - Carrier
type UserServiceGetUserIdArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserServiceGetUserIdArgs() *UserServiceGetUserIdArgs {
  return &UserServiceGetUserIdArgs{}
}


func (p *UserServiceGetUserIdArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserServiceGetUserIdArgs) GetUsername() string {
  return p.Username
}

func (p *UserServiceGetUserIdArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserServiceGetUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserServiceGetUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *UserServiceGetUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key56 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key56 = v
}
var _val57 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val57 = v
}
    p.Carrier[_key56] = _val57
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserServiceGetUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserServiceGetUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *UserServiceGetUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserServiceGetUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserServiceGetUserIdResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserServiceGetUserIdResult() *UserServiceGetUserIdResult {
  return &UserServiceGetUserIdResult{}
}

var UserServiceGetUserIdResult_Success_DEFAULT int64
func (p *UserServiceGetUserIdResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return UserServiceGetUserIdResult_Success_DEFAULT
  }
return *p.Success
}
var UserServiceGetUserIdResult_Se_DEFAULT *ServiceException
func (p *UserServiceGetUserIdResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserServiceGetUserIdResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserServiceGetUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUserIdResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserServiceGetUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *UserServiceGetUserIdResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserServiceGetUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserIdResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserIdResult(%+v)", *p)
}


type ComposePostService interface {
  // Parameters:
  //  - ReqID
  //  - Username
  //  - UserID
  //  - Text
  //  - MediaIds
  //  - MediaTypes
  //  - PostType
  //  - Carrier
  ComposePost(ctx context.Context, req_id int64, username string, user_id int64, text string, media_ids []int64, media_types []string, post_type PostType, carrier map[string]string) (err error)
}

type ComposePostServiceClient struct {
  c thrift.TClient
}

func NewComposePostServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ComposePostServiceClient {
  return &ComposePostServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewComposePostServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ComposePostServiceClient {
  return &ComposePostServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewComposePostServiceClient(c thrift.TClient) *ComposePostServiceClient {
  return &ComposePostServiceClient{
    c: c,
  }
}

func (p *ComposePostServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - Username
//  - UserID
//  - Text
//  - MediaIds
//  - MediaTypes
//  - PostType
//  - Carrier
func (p *ComposePostServiceClient) ComposePost(ctx context.Context, req_id int64, username string, user_id int64, text string, media_ids []int64, media_types []string, post_type PostType, carrier map[string]string) (err error) {
  var _args115 ComposePostServiceComposePostArgs
  _args115.ReqID = req_id
  _args115.Username = username
  _args115.UserID = user_id
  _args115.Text = text
  _args115.MediaIds = media_ids
  _args115.MediaTypes = media_types
  _args115.PostType = post_type
  _args115.Carrier = carrier
  var _result116 ComposePostServiceComposePostResult
  if err = p.Client_().Call(ctx, "ComposePost", &_args115, &_result116); err != nil {
    return
  }
  switch {
  case _result116.Se!= nil:
    return _result116.Se
  }

  return nil
}

type ComposePostServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ComposePostService
}

func (p *ComposePostServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ComposePostServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ComposePostServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewComposePostServiceProcessor(handler ComposePostService) *ComposePostServiceProcessor {

  self117 := &ComposePostServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self117.processorMap["ComposePost"] = &composePostServiceProcessorComposePost{handler:handler}
return self117
}

func (p *ComposePostServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x118 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x118.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x118

}

type composePostServiceProcessorComposePost struct {
  handler ComposePostService
}

func (p *composePostServiceProcessorComposePost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ComposePostServiceComposePostArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposePost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ComposePostServiceComposePostResult{}
  var err2 error
  if err2 = p.handler.ComposePost(ctx, args.ReqID, args.Username, args.UserID, args.Text, args.MediaIds, args.MediaTypes, args.PostType, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposePost: " + err2.Error())
    oprot.WriteMessageBegin("ComposePost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("ComposePost", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Username
//  - UserID
//  - Text
//  - MediaIds
//  - MediaTypes
//  - PostType
//  - Carrier
type ComposePostServiceComposePostArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  UserID int64 `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Text string `thrift:"text,4" db:"text" json:"text"`
  MediaIds []int64 `thrift:"media_ids,5" db:"media_ids" json:"media_ids"`
  MediaTypes []string `thrift:"media_types,6" db:"media_types" json:"media_types"`
  PostType PostType `thrift:"post_type,7" db:"post_type" json:"post_type"`
  Carrier map[string]string `thrift:"carrier,8" db:"carrier" json:"carrier"`
}

func NewComposePostServiceComposePostArgs() *ComposePostServiceComposePostArgs {
  return &ComposePostServiceComposePostArgs{}
}


func (p *ComposePostServiceComposePostArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *ComposePostServiceComposePostArgs) GetUsername() string {
  return p.Username
}

func (p *ComposePostServiceComposePostArgs) GetUserID() int64 {
  return p.UserID
}

func (p *ComposePostServiceComposePostArgs) GetText() string {
  return p.Text
}

func (p *ComposePostServiceComposePostArgs) GetMediaIds() []int64 {
  return p.MediaIds
}

func (p *ComposePostServiceComposePostArgs) GetMediaTypes() []string {
  return p.MediaTypes
}

func (p *ComposePostServiceComposePostArgs) GetPostType() PostType {
  return p.PostType
}

func (p *ComposePostServiceComposePostArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *ComposePostServiceComposePostArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.MediaIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem119 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem119 = v
}
    p.MediaIds = append(p.MediaIds, _elem119)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MediaTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem120 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem120 = v
}
    p.MediaTypes = append(p.MediaTypes, _elem120)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PostType(v)
  p.PostType = temp
}
  return nil
}

func (p *ComposePostServiceComposePostArgs)  ReadField8(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key121 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key121 = v
}
var _val122 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val122 = v
}
    p.Carrier[_key121] = _val122
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ComposePostServiceComposePostArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposePost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposePostServiceComposePostArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:text: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_ids", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:media_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.MediaIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:media_ids: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_types", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:media_types: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.MediaTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaTypes {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:media_types: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_type", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:post_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PostType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:post_type: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:carrier: ", p), err) }
  return err
}

func (p *ComposePostServiceComposePostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposePostServiceComposePostArgs(%+v)", *p)
}

// Attributes:
//  - Se
type ComposePostServiceComposePostResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewComposePostServiceComposePostResult() *ComposePostServiceComposePostResult {
  return &ComposePostServiceComposePostResult{}
}

var ComposePostServiceComposePostResult_Se_DEFAULT *ServiceException
func (p *ComposePostServiceComposePostResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return ComposePostServiceComposePostResult_Se_DEFAULT
  }
return p.Se
}
func (p *ComposePostServiceComposePostResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *ComposePostServiceComposePostResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ComposePostServiceComposePostResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *ComposePostServiceComposePostResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposePost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ComposePostServiceComposePostResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *ComposePostServiceComposePostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ComposePostServiceComposePostResult(%+v)", *p)
}


type PostStorageService interface {
  // Parameters:
  //  - ReqID
  //  - PostIds
  //  - Carrier
  ReadPosts(ctx context.Context, req_id int64, post_ids []int64, carrier map[string]string) (r []*Post, err error)
  // Parameters:
  //  - ReqID
  //  - Post
  //  - Carrier
  StorePost(ctx context.Context, req_id int64, post *Post, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - PostID
  //  - Carrier
  ReadPost(ctx context.Context, req_id int64, post_id int64, carrier map[string]string) (r *Post, err error)
}

type PostStorageServiceClient struct {
  c thrift.TClient
}

func NewPostStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PostStorageServiceClient {
  return &PostStorageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPostStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PostStorageServiceClient {
  return &PostStorageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPostStorageServiceClient(c thrift.TClient) *PostStorageServiceClient {
  return &PostStorageServiceClient{
    c: c,
  }
}

func (p *PostStorageServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - PostIds
//  - Carrier
func (p *PostStorageServiceClient) ReadPosts(ctx context.Context, req_id int64, post_ids []int64, carrier map[string]string) (r []*Post, err error) {
  var _args145 PostStorageServiceReadPostsArgs
  _args145.ReqID = req_id
  _args145.PostIds = post_ids
  _args145.Carrier = carrier
  var _result146 PostStorageServiceReadPostsResult
  if err = p.Client_().Call(ctx, "ReadPosts", &_args145, &_result146); err != nil {
    return
  }
  switch {
  case _result146.Se!= nil:
    return r, _result146.Se
  }

  return _result146.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - Post
//  - Carrier
func (p *PostStorageServiceClient) StorePost(ctx context.Context, req_id int64, post *Post, carrier map[string]string) (err error) {
  var _args147 PostStorageServiceStorePostArgs
  _args147.ReqID = req_id
  _args147.Post = post
  _args147.Carrier = carrier
  var _result148 PostStorageServiceStorePostResult
  if err = p.Client_().Call(ctx, "StorePost", &_args147, &_result148); err != nil {
    return
  }
  switch {
  case _result148.Se!= nil:
    return _result148.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - PostID
//  - Carrier
func (p *PostStorageServiceClient) ReadPost(ctx context.Context, req_id int64, post_id int64, carrier map[string]string) (r *Post, err error) {
  var _args149 PostStorageServiceReadPostArgs
  _args149.ReqID = req_id
  _args149.PostID = post_id
  _args149.Carrier = carrier
  var _result150 PostStorageServiceReadPostResult
  if err = p.Client_().Call(ctx, "ReadPost", &_args149, &_result150); err != nil {
    return
  }
  switch {
  case _result150.Se!= nil:
    return r, _result150.Se
  }

  return _result150.GetSuccess(), nil
}

type PostStorageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PostStorageService
}

func (p *PostStorageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PostStorageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PostStorageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPostStorageServiceProcessor(handler PostStorageService) *PostStorageServiceProcessor {

  self151 := &PostStorageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self151.processorMap["ReadPosts"] = &postStorageServiceProcessorReadPosts{handler:handler}
  self151.processorMap["StorePost"] = &postStorageServiceProcessorStorePost{handler:handler}
  self151.processorMap["ReadPost"] = &postStorageServiceProcessorReadPost{handler:handler}
return self151
}

func (p *PostStorageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x152 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x152.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x152

}

type postStorageServiceProcessorReadPosts struct {
  handler PostStorageService
}

func (p *postStorageServiceProcessorReadPosts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PostStorageServiceReadPostsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReadPosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PostStorageServiceReadPostsResult{}
var retval []*Post
  var err2 error
  if retval, err2 = p.handler.ReadPosts(ctx, args.ReqID, args.PostIds, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadPosts: " + err2.Error())
    oprot.WriteMessageBegin("ReadPosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReadPosts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type postStorageServiceProcessorStorePost struct {
  handler PostStorageService
}

func (p *postStorageServiceProcessorStorePost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PostStorageServiceStorePostArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("StorePost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PostStorageServiceStorePostResult{}
  var err2 error
  if err2 = p.handler.StorePost(ctx, args.ReqID, args.Post, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StorePost: " + err2.Error())
    oprot.WriteMessageBegin("StorePost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("StorePost", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type postStorageServiceProcessorReadPost struct {
  handler PostStorageService
}

func (p *postStorageServiceProcessorReadPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PostStorageServiceReadPostArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReadPost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PostStorageServiceReadPostResult{}
var retval *Post
  var err2 error
  if retval, err2 = p.handler.ReadPost(ctx, args.ReqID, args.PostID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadPost: " + err2.Error())
    oprot.WriteMessageBegin("ReadPost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReadPost", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - PostIds
//  - Carrier
type PostStorageServiceReadPostsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostIds []int64 `thrift:"post_ids,2" db:"post_ids" json:"post_ids"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewPostStorageServiceReadPostsArgs() *PostStorageServiceReadPostsArgs {
  return &PostStorageServiceReadPostsArgs{}
}


func (p *PostStorageServiceReadPostsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *PostStorageServiceReadPostsArgs) GetPostIds() []int64 {
  return p.PostIds
}

func (p *PostStorageServiceReadPostsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PostStorageServiceReadPostsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PostStorageServiceReadPostsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.PostIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem153 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem153 = v
}
    p.PostIds = append(p.PostIds, _elem153)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key154 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key154 = v
}
var _val155 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val155 = v
}
    p.Carrier[_key154] = _val155
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadPosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.PostIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PostIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_ids: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type PostStorageServiceReadPostsResult struct {
  Success []*Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPostStorageServiceReadPostsResult() *PostStorageServiceReadPostsResult {
  return &PostStorageServiceReadPostsResult{}
}

var PostStorageServiceReadPostsResult_Success_DEFAULT []*Post

func (p *PostStorageServiceReadPostsResult) GetSuccess() []*Post {
  return p.Success
}
var PostStorageServiceReadPostsResult_Se_DEFAULT *ServiceException
func (p *PostStorageServiceReadPostsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PostStorageServiceReadPostsResult_Se_DEFAULT
  }
return p.Se
}
func (p *PostStorageServiceReadPostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PostStorageServiceReadPostsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PostStorageServiceReadPostsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Post, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem156 := &Post{}
    if err := _elem156.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem156), err)
    }
    p.Success = append(p.Success, _elem156)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadPosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostsResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Post
//  - Carrier
type PostStorageServiceStorePostArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Post *Post `thrift:"post,2" db:"post" json:"post"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewPostStorageServiceStorePostArgs() *PostStorageServiceStorePostArgs {
  return &PostStorageServiceStorePostArgs{}
}


func (p *PostStorageServiceStorePostArgs) GetReqID() int64 {
  return p.ReqID
}
var PostStorageServiceStorePostArgs_Post_DEFAULT *Post
func (p *PostStorageServiceStorePostArgs) GetPost() *Post {
  if !p.IsSetPost() {
    return PostStorageServiceStorePostArgs_Post_DEFAULT
  }
return p.Post
}

func (p *PostStorageServiceStorePostArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PostStorageServiceStorePostArgs) IsSetPost() bool {
  return p.Post != nil
}

func (p *PostStorageServiceStorePostArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PostStorageServiceStorePostArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Post = &Post{}
  if err := p.Post.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Post), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key157 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key157 = v
}
var _val158 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val158 = v
}
    p.Carrier[_key157] = _val158
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PostStorageServiceStorePostArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StorePost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceStorePostArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PostStorageServiceStorePostArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post: ", p), err) }
  if err := p.Post.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Post), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post: ", p), err) }
  return err
}

func (p *PostStorageServiceStorePostArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *PostStorageServiceStorePostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceStorePostArgs(%+v)", *p)
}

// Attributes:
//  - Se
type PostStorageServiceStorePostResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPostStorageServiceStorePostResult() *PostStorageServiceStorePostResult {
  return &PostStorageServiceStorePostResult{}
}

var PostStorageServiceStorePostResult_Se_DEFAULT *ServiceException
func (p *PostStorageServiceStorePostResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PostStorageServiceStorePostResult_Se_DEFAULT
  }
return p.Se
}
func (p *PostStorageServiceStorePostResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PostStorageServiceStorePostResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PostStorageServiceStorePostResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StorePost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceStorePostResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceStorePostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceStorePostResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - PostID
//  - Carrier
type PostStorageServiceReadPostArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostID int64 `thrift:"post_id,2" db:"post_id" json:"post_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewPostStorageServiceReadPostArgs() *PostStorageServiceReadPostArgs {
  return &PostStorageServiceReadPostArgs{}
}


func (p *PostStorageServiceReadPostArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *PostStorageServiceReadPostArgs) GetPostID() int64 {
  return p.PostID
}

func (p *PostStorageServiceReadPostArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *PostStorageServiceReadPostArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PostStorageServiceReadPostArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *PostStorageServiceReadPostArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key159 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key159 = v
}
var _val160 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val160 = v
}
    p.Carrier[_key159] = _val160
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PostStorageServiceReadPostArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadPost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_id: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *PostStorageServiceReadPostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type PostStorageServiceReadPostResult struct {
  Success *Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewPostStorageServiceReadPostResult() *PostStorageServiceReadPostResult {
  return &PostStorageServiceReadPostResult{}
}

var PostStorageServiceReadPostResult_Success_DEFAULT *Post
func (p *PostStorageServiceReadPostResult) GetSuccess() *Post {
  if !p.IsSetSuccess() {
    return PostStorageServiceReadPostResult_Success_DEFAULT
  }
return p.Success
}
var PostStorageServiceReadPostResult_Se_DEFAULT *ServiceException
func (p *PostStorageServiceReadPostResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return PostStorageServiceReadPostResult_Se_DEFAULT
  }
return p.Se
}
func (p *PostStorageServiceReadPostResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PostStorageServiceReadPostResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *PostStorageServiceReadPostResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Post{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *PostStorageServiceReadPostResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadPost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PostStorageServiceReadPostResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *PostStorageServiceReadPostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PostStorageServiceReadPostResult(%+v)", *p)
}


type HomeTimelineService interface {
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Start
  //  - Stop
  //  - Carrier
  ReadHomeTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (r []*Post, err error)
  // Parameters:
  //  - ReqID
  //  - PostID
  //  - UserID
  //  - Timestamp
  //  - UserMentionsID
  //  - Carrier
  WriteHomeTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, user_mentions_id []int64, carrier map[string]string) (err error)
}

type HomeTimelineServiceClient struct {
  c thrift.TClient
}

func NewHomeTimelineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HomeTimelineServiceClient {
  return &HomeTimelineServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewHomeTimelineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HomeTimelineServiceClient {
  return &HomeTimelineServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewHomeTimelineServiceClient(c thrift.TClient) *HomeTimelineServiceClient {
  return &HomeTimelineServiceClient{
    c: c,
  }
}

func (p *HomeTimelineServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
func (p *HomeTimelineServiceClient) ReadHomeTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (r []*Post, err error) {
  var _args195 HomeTimelineServiceReadHomeTimelineArgs
  _args195.ReqID = req_id
  _args195.UserID = user_id
  _args195.Start = start
  _args195.Stop = stop
  _args195.Carrier = carrier
  var _result196 HomeTimelineServiceReadHomeTimelineResult
  if err = p.Client_().Call(ctx, "ReadHomeTimeline", &_args195, &_result196); err != nil {
    return
  }
  switch {
  case _result196.Se!= nil:
    return r, _result196.Se
  }

  return _result196.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - UserMentionsID
//  - Carrier
func (p *HomeTimelineServiceClient) WriteHomeTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, user_mentions_id []int64, carrier map[string]string) (err error) {
  var _args197 HomeTimelineServiceWriteHomeTimelineArgs
  _args197.ReqID = req_id
  _args197.PostID = post_id
  _args197.UserID = user_id
  _args197.Timestamp = timestamp
  _args197.UserMentionsID = user_mentions_id
  _args197.Carrier = carrier
  var _result198 HomeTimelineServiceWriteHomeTimelineResult
  if err = p.Client_().Call(ctx, "WriteHomeTimeline", &_args197, &_result198); err != nil {
    return
  }
  switch {
  case _result198.Se!= nil:
    return _result198.Se
  }

  return nil
}

type HomeTimelineServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler HomeTimelineService
}

func (p *HomeTimelineServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HomeTimelineServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HomeTimelineServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHomeTimelineServiceProcessor(handler HomeTimelineService) *HomeTimelineServiceProcessor {

  self199 := &HomeTimelineServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self199.processorMap["ReadHomeTimeline"] = &homeTimelineServiceProcessorReadHomeTimeline{handler:handler}
  self199.processorMap["WriteHomeTimeline"] = &homeTimelineServiceProcessorWriteHomeTimeline{handler:handler}
return self199
}

func (p *HomeTimelineServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x200 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x200.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x200

}

type homeTimelineServiceProcessorReadHomeTimeline struct {
  handler HomeTimelineService
}

func (p *homeTimelineServiceProcessorReadHomeTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HomeTimelineServiceReadHomeTimelineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReadHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HomeTimelineServiceReadHomeTimelineResult{}
var retval []*Post
  var err2 error
  if retval, err2 = p.handler.ReadHomeTimeline(ctx, args.ReqID, args.UserID, args.Start, args.Stop, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadHomeTimeline: " + err2.Error())
    oprot.WriteMessageBegin("ReadHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReadHomeTimeline", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type homeTimelineServiceProcessorWriteHomeTimeline struct {
  handler HomeTimelineService
}

func (p *homeTimelineServiceProcessorWriteHomeTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HomeTimelineServiceWriteHomeTimelineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("WriteHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HomeTimelineServiceWriteHomeTimelineResult{}
  var err2 error
  if err2 = p.handler.WriteHomeTimeline(ctx, args.ReqID, args.PostID, args.UserID, args.Timestamp, args.UserMentionsID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteHomeTimeline: " + err2.Error())
    oprot.WriteMessageBegin("WriteHomeTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("WriteHomeTimeline", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
type HomeTimelineServiceReadHomeTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Start int32 `thrift:"start,3" db:"start" json:"start"`
  Stop int32 `thrift:"stop,4" db:"stop" json:"stop"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewHomeTimelineServiceReadHomeTimelineArgs() *HomeTimelineServiceReadHomeTimelineArgs {
  return &HomeTimelineServiceReadHomeTimelineArgs{}
}


func (p *HomeTimelineServiceReadHomeTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetStart() int32 {
  return p.Start
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetStop() int32 {
  return p.Stop
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *HomeTimelineServiceReadHomeTimelineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stop = v
}
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key201 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key201 = v
}
var _val202 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val202 = v
}
    p.Carrier[_key201] = _val202
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadHomeTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start: ", p), err) }
  if err := oprot.WriteI32(int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop: ", p), err) }
  if err := oprot.WriteI32(int32(p.Stop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceReadHomeTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type HomeTimelineServiceReadHomeTimelineResult struct {
  Success []*Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewHomeTimelineServiceReadHomeTimelineResult() *HomeTimelineServiceReadHomeTimelineResult {
  return &HomeTimelineServiceReadHomeTimelineResult{}
}

var HomeTimelineServiceReadHomeTimelineResult_Success_DEFAULT []*Post

func (p *HomeTimelineServiceReadHomeTimelineResult) GetSuccess() []*Post {
  return p.Success
}
var HomeTimelineServiceReadHomeTimelineResult_Se_DEFAULT *ServiceException
func (p *HomeTimelineServiceReadHomeTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return HomeTimelineServiceReadHomeTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *HomeTimelineServiceReadHomeTimelineResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Post, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem203 := &Post{}
    if err := _elem203.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem203), err)
    }
    p.Success = append(p.Success, _elem203)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadHomeTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceReadHomeTimelineResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *HomeTimelineServiceReadHomeTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceReadHomeTimelineResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - UserMentionsID
//  - Carrier
type HomeTimelineServiceWriteHomeTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostID int64 `thrift:"post_id,2" db:"post_id" json:"post_id"`
  UserID int64 `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Timestamp int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  UserMentionsID []int64 `thrift:"user_mentions_id,5" db:"user_mentions_id" json:"user_mentions_id"`
  Carrier map[string]string `thrift:"carrier,6" db:"carrier" json:"carrier"`
}

func NewHomeTimelineServiceWriteHomeTimelineArgs() *HomeTimelineServiceWriteHomeTimelineArgs {
  return &HomeTimelineServiceWriteHomeTimelineArgs{}
}


func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetPostID() int64 {
  return p.PostID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetUserMentionsID() []int64 {
  return p.UserMentionsID
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *HomeTimelineServiceWriteHomeTimelineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.UserMentionsID =  tSlice
  for i := 0; i < size; i ++ {
var _elem204 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem204 = v
}
    p.UserMentionsID = append(p.UserMentionsID, _elem204)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key205 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key205 = v
}
var _val206 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val206 = v
}
    p.Carrier[_key205] = _val206
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WriteHomeTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_mentions_id", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_mentions_id: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.UserMentionsID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserMentionsID {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_mentions_id: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err) }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceWriteHomeTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Se
type HomeTimelineServiceWriteHomeTimelineResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewHomeTimelineServiceWriteHomeTimelineResult() *HomeTimelineServiceWriteHomeTimelineResult {
  return &HomeTimelineServiceWriteHomeTimelineResult{}
}

var HomeTimelineServiceWriteHomeTimelineResult_Se_DEFAULT *ServiceException
func (p *HomeTimelineServiceWriteHomeTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return HomeTimelineServiceWriteHomeTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *HomeTimelineServiceWriteHomeTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WriteHomeTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *HomeTimelineServiceWriteHomeTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HomeTimelineServiceWriteHomeTimelineResult(%+v)", *p)
}


type UserTimelineService interface {
  // Parameters:
  //  - ReqID
  //  - PostID
  //  - UserID
  //  - Timestamp
  //  - Carrier
  WriteUserTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Start
  //  - Stop
  //  - Carrier
  ReadUserTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (r []*Post, err error)
}

type UserTimelineServiceClient struct {
  c thrift.TClient
}

func NewUserTimelineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserTimelineServiceClient {
  return &UserTimelineServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserTimelineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserTimelineServiceClient {
  return &UserTimelineServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserTimelineServiceClient(c thrift.TClient) *UserTimelineServiceClient {
  return &UserTimelineServiceClient{
    c: c,
  }
}

func (p *UserTimelineServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - Carrier
func (p *UserTimelineServiceClient) WriteUserTimeline(ctx context.Context, req_id int64, post_id int64, user_id int64, timestamp int64, carrier map[string]string) (err error) {
  var _args233 UserTimelineServiceWriteUserTimelineArgs
  _args233.ReqID = req_id
  _args233.PostID = post_id
  _args233.UserID = user_id
  _args233.Timestamp = timestamp
  _args233.Carrier = carrier
  var _result234 UserTimelineServiceWriteUserTimelineResult
  if err = p.Client_().Call(ctx, "WriteUserTimeline", &_args233, &_result234); err != nil {
    return
  }
  switch {
  case _result234.Se!= nil:
    return _result234.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
func (p *UserTimelineServiceClient) ReadUserTimeline(ctx context.Context, req_id int64, user_id int64, start int32, stop int32, carrier map[string]string) (r []*Post, err error) {
  var _args235 UserTimelineServiceReadUserTimelineArgs
  _args235.ReqID = req_id
  _args235.UserID = user_id
  _args235.Start = start
  _args235.Stop = stop
  _args235.Carrier = carrier
  var _result236 UserTimelineServiceReadUserTimelineResult
  if err = p.Client_().Call(ctx, "ReadUserTimeline", &_args235, &_result236); err != nil {
    return
  }
  switch {
  case _result236.Se!= nil:
    return r, _result236.Se
  }

  return _result236.GetSuccess(), nil
}

type UserTimelineServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserTimelineService
}

func (p *UserTimelineServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserTimelineServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserTimelineServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserTimelineServiceProcessor(handler UserTimelineService) *UserTimelineServiceProcessor {

  self237 := &UserTimelineServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self237.processorMap["WriteUserTimeline"] = &userTimelineServiceProcessorWriteUserTimeline{handler:handler}
  self237.processorMap["ReadUserTimeline"] = &userTimelineServiceProcessorReadUserTimeline{handler:handler}
return self237
}

func (p *UserTimelineServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x238 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x238.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x238

}

type userTimelineServiceProcessorWriteUserTimeline struct {
  handler UserTimelineService
}

func (p *userTimelineServiceProcessorWriteUserTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserTimelineServiceWriteUserTimelineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("WriteUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserTimelineServiceWriteUserTimelineResult{}
  var err2 error
  if err2 = p.handler.WriteUserTimeline(ctx, args.ReqID, args.PostID, args.UserID, args.Timestamp, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing WriteUserTimeline: " + err2.Error())
    oprot.WriteMessageBegin("WriteUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("WriteUserTimeline", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userTimelineServiceProcessorReadUserTimeline struct {
  handler UserTimelineService
}

func (p *userTimelineServiceProcessorReadUserTimeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserTimelineServiceReadUserTimelineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReadUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserTimelineServiceReadUserTimelineResult{}
var retval []*Post
  var err2 error
  if retval, err2 = p.handler.ReadUserTimeline(ctx, args.ReqID, args.UserID, args.Start, args.Stop, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadUserTimeline: " + err2.Error())
    oprot.WriteMessageBegin("ReadUserTimeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReadUserTimeline", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - PostID
//  - UserID
//  - Timestamp
//  - Carrier
type UserTimelineServiceWriteUserTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  PostID int64 `thrift:"post_id,2" db:"post_id" json:"post_id"`
  UserID int64 `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Timestamp int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewUserTimelineServiceWriteUserTimelineArgs() *UserTimelineServiceWriteUserTimelineArgs {
  return &UserTimelineServiceWriteUserTimelineArgs{}
}


func (p *UserTimelineServiceWriteUserTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetPostID() int64 {
  return p.PostID
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *UserTimelineServiceWriteUserTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserTimelineServiceWriteUserTimelineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PostID = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key239 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key239 = v
}
var _val240 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val240 = v
}
    p.Carrier[_key239] = _val240
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WriteUserTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("post_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:post_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.PostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.post_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:post_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceWriteUserTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Se
type UserTimelineServiceWriteUserTimelineResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserTimelineServiceWriteUserTimelineResult() *UserTimelineServiceWriteUserTimelineResult {
  return &UserTimelineServiceWriteUserTimelineResult{}
}

var UserTimelineServiceWriteUserTimelineResult_Se_DEFAULT *ServiceException
func (p *UserTimelineServiceWriteUserTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserTimelineServiceWriteUserTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserTimelineServiceWriteUserTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserTimelineServiceWriteUserTimelineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WriteUserTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceWriteUserTimelineResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserTimelineServiceWriteUserTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceWriteUserTimelineResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Start
//  - Stop
//  - Carrier
type UserTimelineServiceReadUserTimelineArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Start int32 `thrift:"start,3" db:"start" json:"start"`
  Stop int32 `thrift:"stop,4" db:"stop" json:"stop"`
  Carrier map[string]string `thrift:"carrier,5" db:"carrier" json:"carrier"`
}

func NewUserTimelineServiceReadUserTimelineArgs() *UserTimelineServiceReadUserTimelineArgs {
  return &UserTimelineServiceReadUserTimelineArgs{}
}


func (p *UserTimelineServiceReadUserTimelineArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetUserID() int64 {
  return p.UserID
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetStart() int32 {
  return p.Start
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetStop() int32 {
  return p.Stop
}

func (p *UserTimelineServiceReadUserTimelineArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserTimelineServiceReadUserTimelineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stop = v
}
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key241 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key241 = v
}
var _val242 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val242 = v
}
    p.Carrier[_key241] = _val242
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadUserTimeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start: ", p), err) }
  if err := oprot.WriteI32(int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stop", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop: ", p), err) }
  if err := oprot.WriteI32(int32(p.Stop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:carrier: ", p), err) }
  return err
}

func (p *UserTimelineServiceReadUserTimelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceReadUserTimelineArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserTimelineServiceReadUserTimelineResult struct {
  Success []*Post `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserTimelineServiceReadUserTimelineResult() *UserTimelineServiceReadUserTimelineResult {
  return &UserTimelineServiceReadUserTimelineResult{}
}

var UserTimelineServiceReadUserTimelineResult_Success_DEFAULT []*Post

func (p *UserTimelineServiceReadUserTimelineResult) GetSuccess() []*Post {
  return p.Success
}
var UserTimelineServiceReadUserTimelineResult_Se_DEFAULT *ServiceException
func (p *UserTimelineServiceReadUserTimelineResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserTimelineServiceReadUserTimelineResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserTimelineServiceReadUserTimelineResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserTimelineServiceReadUserTimelineResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserTimelineServiceReadUserTimelineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Post, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem243 := &Post{}
    if err := _elem243.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem243), err)
    }
    p.Success = append(p.Success, _elem243)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadUserTimeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserTimelineServiceReadUserTimelineResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserTimelineServiceReadUserTimelineResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserTimelineServiceReadUserTimelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserTimelineServiceReadUserTimelineResult(%+v)", *p)
}


type SocialGraphService interface {
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  GetFollowers(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (r []int64, err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  GetFollowees(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (r []int64, err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - FolloweeID
  //  - Carrier
  Follow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - FolloweeID
  //  - Carrier
  Unfollow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - UserUsernmae
  //  - FolloweeUsername
  //  - Carrier
  FollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - UserUsernmae
  //  - FolloweeUsername
  //  - Carrier
  UnfollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (err error)
  // Parameters:
  //  - ReqID
  //  - UserID
  //  - Carrier
  InsertUser(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (err error)
}

type SocialGraphServiceClient struct {
  c thrift.TClient
}

func NewSocialGraphServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SocialGraphServiceClient {
  return &SocialGraphServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSocialGraphServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SocialGraphServiceClient {
  return &SocialGraphServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSocialGraphServiceClient(c thrift.TClient) *SocialGraphServiceClient {
  return &SocialGraphServiceClient{
    c: c,
  }
}

func (p *SocialGraphServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *SocialGraphServiceClient) GetFollowers(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (r []int64, err error) {
  var _args264 SocialGraphServiceGetFollowersArgs
  _args264.ReqID = req_id
  _args264.UserID = user_id
  _args264.Carrier = carrier
  var _result265 SocialGraphServiceGetFollowersResult
  if err = p.Client_().Call(ctx, "GetFollowers", &_args264, &_result265); err != nil {
    return
  }
  switch {
  case _result265.Se!= nil:
    return r, _result265.Se
  }

  return _result265.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *SocialGraphServiceClient) GetFollowees(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (r []int64, err error) {
  var _args266 SocialGraphServiceGetFolloweesArgs
  _args266.ReqID = req_id
  _args266.UserID = user_id
  _args266.Carrier = carrier
  var _result267 SocialGraphServiceGetFolloweesResult
  if err = p.Client_().Call(ctx, "GetFollowees", &_args266, &_result267); err != nil {
    return
  }
  switch {
  case _result267.Se!= nil:
    return r, _result267.Se
  }

  return _result267.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
func (p *SocialGraphServiceClient) Follow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (err error) {
  var _args268 SocialGraphServiceFollowArgs
  _args268.ReqID = req_id
  _args268.UserID = user_id
  _args268.FolloweeID = followee_id
  _args268.Carrier = carrier
  var _result269 SocialGraphServiceFollowResult
  if err = p.Client_().Call(ctx, "Follow", &_args268, &_result269); err != nil {
    return
  }
  switch {
  case _result269.Se!= nil:
    return _result269.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
func (p *SocialGraphServiceClient) Unfollow(ctx context.Context, req_id int64, user_id int64, followee_id int64, carrier map[string]string) (err error) {
  var _args270 SocialGraphServiceUnfollowArgs
  _args270.ReqID = req_id
  _args270.UserID = user_id
  _args270.FolloweeID = followee_id
  _args270.Carrier = carrier
  var _result271 SocialGraphServiceUnfollowResult
  if err = p.Client_().Call(ctx, "Unfollow", &_args270, &_result271); err != nil {
    return
  }
  switch {
  case _result271.Se!= nil:
    return _result271.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
func (p *SocialGraphServiceClient) FollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (err error) {
  var _args272 SocialGraphServiceFollowWithUsernameArgs
  _args272.ReqID = req_id
  _args272.UserUsernmae = user_usernmae
  _args272.FolloweeUsername = followee_username
  _args272.Carrier = carrier
  var _result273 SocialGraphServiceFollowWithUsernameResult
  if err = p.Client_().Call(ctx, "FollowWithUsername", &_args272, &_result273); err != nil {
    return
  }
  switch {
  case _result273.Se!= nil:
    return _result273.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
func (p *SocialGraphServiceClient) UnfollowWithUsername(ctx context.Context, req_id int64, user_usernmae string, followee_username string, carrier map[string]string) (err error) {
  var _args274 SocialGraphServiceUnfollowWithUsernameArgs
  _args274.ReqID = req_id
  _args274.UserUsernmae = user_usernmae
  _args274.FolloweeUsername = followee_username
  _args274.Carrier = carrier
  var _result275 SocialGraphServiceUnfollowWithUsernameResult
  if err = p.Client_().Call(ctx, "UnfollowWithUsername", &_args274, &_result275); err != nil {
    return
  }
  switch {
  case _result275.Se!= nil:
    return _result275.Se
  }

  return nil
}

// Parameters:
//  - ReqID
//  - UserID
//  - Carrier
func (p *SocialGraphServiceClient) InsertUser(ctx context.Context, req_id int64, user_id int64, carrier map[string]string) (err error) {
  var _args276 SocialGraphServiceInsertUserArgs
  _args276.ReqID = req_id
  _args276.UserID = user_id
  _args276.Carrier = carrier
  var _result277 SocialGraphServiceInsertUserResult
  if err = p.Client_().Call(ctx, "InsertUser", &_args276, &_result277); err != nil {
    return
  }
  switch {
  case _result277.Se!= nil:
    return _result277.Se
  }

  return nil
}

type SocialGraphServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SocialGraphService
}

func (p *SocialGraphServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SocialGraphServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SocialGraphServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSocialGraphServiceProcessor(handler SocialGraphService) *SocialGraphServiceProcessor {

  self278 := &SocialGraphServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self278.processorMap["GetFollowers"] = &socialGraphServiceProcessorGetFollowers{handler:handler}
  self278.processorMap["GetFollowees"] = &socialGraphServiceProcessorGetFollowees{handler:handler}
  self278.processorMap["Follow"] = &socialGraphServiceProcessorFollow{handler:handler}
  self278.processorMap["Unfollow"] = &socialGraphServiceProcessorUnfollow{handler:handler}
  self278.processorMap["FollowWithUsername"] = &socialGraphServiceProcessorFollowWithUsername{handler:handler}
  self278.processorMap["UnfollowWithUsername"] = &socialGraphServiceProcessorUnfollowWithUsername{handler:handler}
  self278.processorMap["InsertUser"] = &socialGraphServiceProcessorInsertUser{handler:handler}
return self278
}

func (p *SocialGraphServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x279 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x279.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x279

}

type socialGraphServiceProcessorGetFollowers struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorGetFollowers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceGetFollowersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetFollowers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SocialGraphServiceGetFollowersResult{}
var retval []int64
  var err2 error
  if retval, err2 = p.handler.GetFollowers(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowers: " + err2.Error())
    oprot.WriteMessageBegin("GetFollowers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetFollowers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorGetFollowees struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorGetFollowees) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceGetFolloweesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetFollowees", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SocialGraphServiceGetFolloweesResult{}
var retval []int64
  var err2 error
  if retval, err2 = p.handler.GetFollowees(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFollowees: " + err2.Error())
    oprot.WriteMessageBegin("GetFollowees", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetFollowees", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorFollow struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorFollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceFollowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Follow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SocialGraphServiceFollowResult{}
  var err2 error
  if err2 = p.handler.Follow(ctx, args.ReqID, args.UserID, args.FolloweeID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Follow: " + err2.Error())
    oprot.WriteMessageBegin("Follow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("Follow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorUnfollow struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorUnfollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceUnfollowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Unfollow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SocialGraphServiceUnfollowResult{}
  var err2 error
  if err2 = p.handler.Unfollow(ctx, args.ReqID, args.UserID, args.FolloweeID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Unfollow: " + err2.Error())
    oprot.WriteMessageBegin("Unfollow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("Unfollow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorFollowWithUsername struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorFollowWithUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceFollowWithUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SocialGraphServiceFollowWithUsernameResult{}
  var err2 error
  if err2 = p.handler.FollowWithUsername(ctx, args.ReqID, args.UserUsernmae, args.FolloweeUsername, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FollowWithUsername: " + err2.Error())
    oprot.WriteMessageBegin("FollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("FollowWithUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorUnfollowWithUsername struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorUnfollowWithUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceUnfollowWithUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UnfollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SocialGraphServiceUnfollowWithUsernameResult{}
  var err2 error
  if err2 = p.handler.UnfollowWithUsername(ctx, args.ReqID, args.UserUsernmae, args.FolloweeUsername, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UnfollowWithUsername: " + err2.Error())
    oprot.WriteMessageBegin("UnfollowWithUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("UnfollowWithUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type socialGraphServiceProcessorInsertUser struct {
  handler SocialGraphService
}

func (p *socialGraphServiceProcessorInsertUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SocialGraphServiceInsertUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SocialGraphServiceInsertUserResult{}
  var err2 error
  if err2 = p.handler.InsertUser(ctx, args.ReqID, args.UserID, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertUser: " + err2.Error())
    oprot.WriteMessageBegin("InsertUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("InsertUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type SocialGraphServiceGetFollowersArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceGetFollowersArgs() *SocialGraphServiceGetFollowersArgs {
  return &SocialGraphServiceGetFollowersArgs{}
}


func (p *SocialGraphServiceGetFollowersArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceGetFollowersArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceGetFollowersArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceGetFollowersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key280 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key280 = v
}
var _val281 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val281 = v
}
    p.Carrier[_key280] = _val281
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFollowersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFollowersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFollowersArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFollowersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFollowersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type SocialGraphServiceGetFollowersResult struct {
  Success []int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceGetFollowersResult() *SocialGraphServiceGetFollowersResult {
  return &SocialGraphServiceGetFollowersResult{}
}

var SocialGraphServiceGetFollowersResult_Success_DEFAULT []int64

func (p *SocialGraphServiceGetFollowersResult) GetSuccess() []int64 {
  return p.Success
}
var SocialGraphServiceGetFollowersResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceGetFollowersResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceGetFollowersResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceGetFollowersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SocialGraphServiceGetFollowersResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceGetFollowersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem282 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem282 = v
}
    p.Success = append(p.Success, _elem282)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFollowersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFollowersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFollowersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFollowersResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type SocialGraphServiceGetFolloweesArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceGetFolloweesArgs() *SocialGraphServiceGetFolloweesArgs {
  return &SocialGraphServiceGetFolloweesArgs{}
}


func (p *SocialGraphServiceGetFolloweesArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceGetFolloweesArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceGetFolloweesArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceGetFolloweesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key283 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key283 = v
}
var _val284 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val284 = v
}
    p.Carrier[_key283] = _val284
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowees_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFolloweesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFolloweesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFolloweesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceGetFolloweesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFolloweesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type SocialGraphServiceGetFolloweesResult struct {
  Success []int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceGetFolloweesResult() *SocialGraphServiceGetFolloweesResult {
  return &SocialGraphServiceGetFolloweesResult{}
}

var SocialGraphServiceGetFolloweesResult_Success_DEFAULT []int64

func (p *SocialGraphServiceGetFolloweesResult) GetSuccess() []int64 {
  return p.Success
}
var SocialGraphServiceGetFolloweesResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceGetFolloweesResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceGetFolloweesResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceGetFolloweesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SocialGraphServiceGetFolloweesResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceGetFolloweesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem285 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem285 = v
}
    p.Success = append(p.Success, _elem285)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowees_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceGetFolloweesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFolloweesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceGetFolloweesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceGetFolloweesResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
type SocialGraphServiceFollowArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  FolloweeID int64 `thrift:"followee_id,3" db:"followee_id" json:"followee_id"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceFollowArgs() *SocialGraphServiceFollowArgs {
  return &SocialGraphServiceFollowArgs{}
}


func (p *SocialGraphServiceFollowArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceFollowArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceFollowArgs) GetFolloweeID() int64 {
  return p.FolloweeID
}

func (p *SocialGraphServiceFollowArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceFollowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeID = v
}
  return nil
}

func (p *SocialGraphServiceFollowArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key286 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key286 = v
}
var _val287 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val287 = v
}
    p.Carrier[_key286] = _val287
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceFollowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Follow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followee_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.FolloweeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceFollowResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceFollowResult() *SocialGraphServiceFollowResult {
  return &SocialGraphServiceFollowResult{}
}

var SocialGraphServiceFollowResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceFollowResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceFollowResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceFollowResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceFollowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Follow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceFollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - FolloweeID
//  - Carrier
type SocialGraphServiceUnfollowArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  FolloweeID int64 `thrift:"followee_id,3" db:"followee_id" json:"followee_id"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceUnfollowArgs() *SocialGraphServiceUnfollowArgs {
  return &SocialGraphServiceUnfollowArgs{}
}


func (p *SocialGraphServiceUnfollowArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceUnfollowArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceUnfollowArgs) GetFolloweeID() int64 {
  return p.FolloweeID
}

func (p *SocialGraphServiceUnfollowArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceUnfollowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key288 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key288 = v
}
var _val289 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val289 = v
}
    p.Carrier[_key288] = _val289
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Unfollow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followee_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.FolloweeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceUnfollowResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceUnfollowResult() *SocialGraphServiceUnfollowResult {
  return &SocialGraphServiceUnfollowResult{}
}

var SocialGraphServiceUnfollowResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceUnfollowResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceUnfollowResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceUnfollowResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceUnfollowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Unfollow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceUnfollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
type SocialGraphServiceFollowWithUsernameArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserUsernmae string `thrift:"user_usernmae,2" db:"user_usernmae" json:"user_usernmae"`
  FolloweeUsername string `thrift:"followee_username,3" db:"followee_username" json:"followee_username"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceFollowWithUsernameArgs() *SocialGraphServiceFollowWithUsernameArgs {
  return &SocialGraphServiceFollowWithUsernameArgs{}
}


func (p *SocialGraphServiceFollowWithUsernameArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceFollowWithUsernameArgs) GetUserUsernmae() string {
  return p.UserUsernmae
}

func (p *SocialGraphServiceFollowWithUsernameArgs) GetFolloweeUsername() string {
  return p.FolloweeUsername
}

func (p *SocialGraphServiceFollowWithUsernameArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceFollowWithUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserUsernmae = v
}
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeUsername = v
}
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key290 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key290 = v
}
var _val291 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val291 = v
}
    p.Carrier[_key290] = _val291
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FollowWithUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_usernmae", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_usernmae: ", p), err) }
  if err := oprot.WriteString(string(p.UserUsernmae)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_usernmae (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_usernmae: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followee_username", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_username: ", p), err) }
  if err := oprot.WriteString(string(p.FolloweeUsername)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_username (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_username: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowWithUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceFollowWithUsernameResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceFollowWithUsernameResult() *SocialGraphServiceFollowWithUsernameResult {
  return &SocialGraphServiceFollowWithUsernameResult{}
}

var SocialGraphServiceFollowWithUsernameResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceFollowWithUsernameResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceFollowWithUsernameResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceFollowWithUsernameResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceFollowWithUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FollowWithUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceFollowWithUsernameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceFollowWithUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceFollowWithUsernameResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserUsernmae
//  - FolloweeUsername
//  - Carrier
type SocialGraphServiceUnfollowWithUsernameArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserUsernmae string `thrift:"user_usernmae,2" db:"user_usernmae" json:"user_usernmae"`
  FolloweeUsername string `thrift:"followee_username,3" db:"followee_username" json:"followee_username"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceUnfollowWithUsernameArgs() *SocialGraphServiceUnfollowWithUsernameArgs {
  return &SocialGraphServiceUnfollowWithUsernameArgs{}
}


func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetUserUsernmae() string {
  return p.UserUsernmae
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetFolloweeUsername() string {
  return p.FolloweeUsername
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceUnfollowWithUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserUsernmae = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FolloweeUsername = v
}
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key292 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key292 = v
}
var _val293 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val293 = v
}
    p.Carrier[_key292] = _val293
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnfollowWithUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_usernmae", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_usernmae: ", p), err) }
  if err := oprot.WriteString(string(p.UserUsernmae)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_usernmae (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_usernmae: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followee_username", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followee_username: ", p), err) }
  if err := oprot.WriteString(string(p.FolloweeUsername)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followee_username (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followee_username: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowWithUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceUnfollowWithUsernameResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceUnfollowWithUsernameResult() *SocialGraphServiceUnfollowWithUsernameResult {
  return &SocialGraphServiceUnfollowWithUsernameResult{}
}

var SocialGraphServiceUnfollowWithUsernameResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceUnfollowWithUsernameResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceUnfollowWithUsernameResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceUnfollowWithUsernameResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnfollowWithUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceUnfollowWithUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceUnfollowWithUsernameResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - UserID
//  - Carrier
type SocialGraphServiceInsertUserArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  UserID int64 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewSocialGraphServiceInsertUserArgs() *SocialGraphServiceInsertUserArgs {
  return &SocialGraphServiceInsertUserArgs{}
}


func (p *SocialGraphServiceInsertUserArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *SocialGraphServiceInsertUserArgs) GetUserID() int64 {
  return p.UserID
}

func (p *SocialGraphServiceInsertUserArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *SocialGraphServiceInsertUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *SocialGraphServiceInsertUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SocialGraphServiceInsertUserArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key294 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key294 = v
}
var _val295 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val295 = v
}
    p.Carrier[_key294] = _val295
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceInsertUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceInsertUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *SocialGraphServiceInsertUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *SocialGraphServiceInsertUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceInsertUserArgs(%+v)", *p)
}

// Attributes:
//  - Se
type SocialGraphServiceInsertUserResult struct {
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewSocialGraphServiceInsertUserResult() *SocialGraphServiceInsertUserResult {
  return &SocialGraphServiceInsertUserResult{}
}

var SocialGraphServiceInsertUserResult_Se_DEFAULT *ServiceException
func (p *SocialGraphServiceInsertUserResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return SocialGraphServiceInsertUserResult_Se_DEFAULT
  }
return p.Se
}
func (p *SocialGraphServiceInsertUserResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *SocialGraphServiceInsertUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *SocialGraphServiceInsertUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SocialGraphServiceInsertUserResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *SocialGraphServiceInsertUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SocialGraphServiceInsertUserResult(%+v)", *p)
}


type UserMentionService interface {
  // Parameters:
  //  - ReqID
  //  - Usernames
  //  - Carrier
  ComposeUserMentions(ctx context.Context, req_id int64, usernames []string, carrier map[string]string) (r []*UserMention, err error)
}

type UserMentionServiceClient struct {
  c thrift.TClient
}

func NewUserMentionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserMentionServiceClient {
  return &UserMentionServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUserMentionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserMentionServiceClient {
  return &UserMentionServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserMentionServiceClient(c thrift.TClient) *UserMentionServiceClient {
  return &UserMentionServiceClient{
    c: c,
  }
}

func (p *UserMentionServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - Usernames
//  - Carrier
func (p *UserMentionServiceClient) ComposeUserMentions(ctx context.Context, req_id int64, usernames []string, carrier map[string]string) (r []*UserMention, err error) {
  var _args356 UserMentionServiceComposeUserMentionsArgs
  _args356.ReqID = req_id
  _args356.Usernames = usernames
  _args356.Carrier = carrier
  var _result357 UserMentionServiceComposeUserMentionsResult
  if err = p.Client_().Call(ctx, "ComposeUserMentions", &_args356, &_result357); err != nil {
    return
  }
  switch {
  case _result357.Se!= nil:
    return r, _result357.Se
  }

  return _result357.GetSuccess(), nil
}

type UserMentionServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserMentionService
}

func (p *UserMentionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserMentionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserMentionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserMentionServiceProcessor(handler UserMentionService) *UserMentionServiceProcessor {

  self358 := &UserMentionServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self358.processorMap["ComposeUserMentions"] = &userMentionServiceProcessorComposeUserMentions{handler:handler}
return self358
}

func (p *UserMentionServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x359 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x359.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x359

}

type userMentionServiceProcessorComposeUserMentions struct {
  handler UserMentionService
}

func (p *userMentionServiceProcessorComposeUserMentions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserMentionServiceComposeUserMentionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposeUserMentions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserMentionServiceComposeUserMentionsResult{}
var retval []*UserMention
  var err2 error
  if retval, err2 = p.handler.ComposeUserMentions(ctx, args.ReqID, args.Usernames, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeUserMentions: " + err2.Error())
    oprot.WriteMessageBegin("ComposeUserMentions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ComposeUserMentions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Usernames
//  - Carrier
type UserMentionServiceComposeUserMentionsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Usernames []string `thrift:"usernames,2" db:"usernames" json:"usernames"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUserMentionServiceComposeUserMentionsArgs() *UserMentionServiceComposeUserMentionsArgs {
  return &UserMentionServiceComposeUserMentionsArgs{}
}


func (p *UserMentionServiceComposeUserMentionsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UserMentionServiceComposeUserMentionsArgs) GetUsernames() []string {
  return p.Usernames
}

func (p *UserMentionServiceComposeUserMentionsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UserMentionServiceComposeUserMentionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Usernames =  tSlice
  for i := 0; i < size; i ++ {
var _elem360 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem360 = v
}
    p.Usernames = append(p.Usernames, _elem360)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key361 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key361 = v
}
var _val362 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val362 = v
}
    p.Carrier[_key361] = _val362
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeUserMentions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UserMentionServiceComposeUserMentionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("usernames", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usernames: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Usernames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Usernames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usernames: ", p), err) }
  return err
}

func (p *UserMentionServiceComposeUserMentionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UserMentionServiceComposeUserMentionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserMentionServiceComposeUserMentionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UserMentionServiceComposeUserMentionsResult struct {
  Success []*UserMention `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUserMentionServiceComposeUserMentionsResult() *UserMentionServiceComposeUserMentionsResult {
  return &UserMentionServiceComposeUserMentionsResult{}
}

var UserMentionServiceComposeUserMentionsResult_Success_DEFAULT []*UserMention

func (p *UserMentionServiceComposeUserMentionsResult) GetSuccess() []*UserMention {
  return p.Success
}
var UserMentionServiceComposeUserMentionsResult_Se_DEFAULT *ServiceException
func (p *UserMentionServiceComposeUserMentionsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UserMentionServiceComposeUserMentionsResult_Se_DEFAULT
  }
return p.Se
}
func (p *UserMentionServiceComposeUserMentionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserMentionServiceComposeUserMentionsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UserMentionServiceComposeUserMentionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserMention, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem363 := &UserMention{}
    if err := _elem363.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem363), err)
    }
    p.Success = append(p.Success, _elem363)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeUserMentions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserMentionServiceComposeUserMentionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserMentionServiceComposeUserMentionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UserMentionServiceComposeUserMentionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserMentionServiceComposeUserMentionsResult(%+v)", *p)
}


type UrlShortenService interface {
  // Parameters:
  //  - ReqID
  //  - Urls
  //  - Carrier
  ComposeUrls(ctx context.Context, req_id int64, urls []string, carrier map[string]string) (r []*URL, err error)
  // Parameters:
  //  - ReqID
  //  - ShortenedUrls
  //  - Carrier
  GetExtendedUrls(ctx context.Context, req_id int64, shortened_urls []string, carrier map[string]string) (r []string, err error)
}

type UrlShortenServiceClient struct {
  c thrift.TClient
}

func NewUrlShortenServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UrlShortenServiceClient {
  return &UrlShortenServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewUrlShortenServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UrlShortenServiceClient {
  return &UrlShortenServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUrlShortenServiceClient(c thrift.TClient) *UrlShortenServiceClient {
  return &UrlShortenServiceClient{
    c: c,
  }
}

func (p *UrlShortenServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - Urls
//  - Carrier
func (p *UrlShortenServiceClient) ComposeUrls(ctx context.Context, req_id int64, urls []string, carrier map[string]string) (r []*URL, err error) {
  var _args377 UrlShortenServiceComposeUrlsArgs
  _args377.ReqID = req_id
  _args377.Urls = urls
  _args377.Carrier = carrier
  var _result378 UrlShortenServiceComposeUrlsResult
  if err = p.Client_().Call(ctx, "ComposeUrls", &_args377, &_result378); err != nil {
    return
  }
  switch {
  case _result378.Se!= nil:
    return r, _result378.Se
  }

  return _result378.GetSuccess(), nil
}

// Parameters:
//  - ReqID
//  - ShortenedUrls
//  - Carrier
func (p *UrlShortenServiceClient) GetExtendedUrls(ctx context.Context, req_id int64, shortened_urls []string, carrier map[string]string) (r []string, err error) {
  var _args379 UrlShortenServiceGetExtendedUrlsArgs
  _args379.ReqID = req_id
  _args379.ShortenedUrls = shortened_urls
  _args379.Carrier = carrier
  var _result380 UrlShortenServiceGetExtendedUrlsResult
  if err = p.Client_().Call(ctx, "GetExtendedUrls", &_args379, &_result380); err != nil {
    return
  }
  switch {
  case _result380.Se!= nil:
    return r, _result380.Se
  }

  return _result380.GetSuccess(), nil
}

type UrlShortenServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UrlShortenService
}

func (p *UrlShortenServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UrlShortenServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UrlShortenServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUrlShortenServiceProcessor(handler UrlShortenService) *UrlShortenServiceProcessor {

  self381 := &UrlShortenServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self381.processorMap["ComposeUrls"] = &urlShortenServiceProcessorComposeUrls{handler:handler}
  self381.processorMap["GetExtendedUrls"] = &urlShortenServiceProcessorGetExtendedUrls{handler:handler}
return self381
}

func (p *UrlShortenServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x382 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x382.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x382

}

type urlShortenServiceProcessorComposeUrls struct {
  handler UrlShortenService
}

func (p *urlShortenServiceProcessorComposeUrls) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UrlShortenServiceComposeUrlsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposeUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UrlShortenServiceComposeUrlsResult{}
var retval []*URL
  var err2 error
  if retval, err2 = p.handler.ComposeUrls(ctx, args.ReqID, args.Urls, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeUrls: " + err2.Error())
    oprot.WriteMessageBegin("ComposeUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ComposeUrls", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type urlShortenServiceProcessorGetExtendedUrls struct {
  handler UrlShortenService
}

func (p *urlShortenServiceProcessorGetExtendedUrls) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UrlShortenServiceGetExtendedUrlsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetExtendedUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UrlShortenServiceGetExtendedUrlsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetExtendedUrls(ctx, args.ReqID, args.ShortenedUrls, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExtendedUrls: " + err2.Error())
    oprot.WriteMessageBegin("GetExtendedUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetExtendedUrls", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - Urls
//  - Carrier
type UrlShortenServiceComposeUrlsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  Urls []string `thrift:"urls,2" db:"urls" json:"urls"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUrlShortenServiceComposeUrlsArgs() *UrlShortenServiceComposeUrlsArgs {
  return &UrlShortenServiceComposeUrlsArgs{}
}


func (p *UrlShortenServiceComposeUrlsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UrlShortenServiceComposeUrlsArgs) GetUrls() []string {
  return p.Urls
}

func (p *UrlShortenServiceComposeUrlsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UrlShortenServiceComposeUrlsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Urls =  tSlice
  for i := 0; i < size; i ++ {
var _elem383 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem383 = v
}
    p.Urls = append(p.Urls, _elem383)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key384 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key384 = v
}
var _val385 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val385 = v
}
    p.Carrier[_key384] = _val385
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeUrls_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceComposeUrlsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UrlShortenServiceComposeUrlsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("urls", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:urls: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Urls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Urls {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:urls: ", p), err) }
  return err
}

func (p *UrlShortenServiceComposeUrlsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UrlShortenServiceComposeUrlsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceComposeUrlsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UrlShortenServiceComposeUrlsResult struct {
  Success []*URL `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUrlShortenServiceComposeUrlsResult() *UrlShortenServiceComposeUrlsResult {
  return &UrlShortenServiceComposeUrlsResult{}
}

var UrlShortenServiceComposeUrlsResult_Success_DEFAULT []*URL

func (p *UrlShortenServiceComposeUrlsResult) GetSuccess() []*URL {
  return p.Success
}
var UrlShortenServiceComposeUrlsResult_Se_DEFAULT *ServiceException
func (p *UrlShortenServiceComposeUrlsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UrlShortenServiceComposeUrlsResult_Se_DEFAULT
  }
return p.Se
}
func (p *UrlShortenServiceComposeUrlsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UrlShortenServiceComposeUrlsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UrlShortenServiceComposeUrlsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*URL, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem386 := &URL{}
    if err := _elem386.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem386), err)
    }
    p.Success = append(p.Success, _elem386)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeUrls_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceComposeUrlsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceComposeUrlsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceComposeUrlsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceComposeUrlsResult(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ShortenedUrls
//  - Carrier
type UrlShortenServiceGetExtendedUrlsArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  ShortenedUrls []string `thrift:"shortened_urls,2" db:"shortened_urls" json:"shortened_urls"`
  Carrier map[string]string `thrift:"carrier,3" db:"carrier" json:"carrier"`
}

func NewUrlShortenServiceGetExtendedUrlsArgs() *UrlShortenServiceGetExtendedUrlsArgs {
  return &UrlShortenServiceGetExtendedUrlsArgs{}
}


func (p *UrlShortenServiceGetExtendedUrlsArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) GetShortenedUrls() []string {
  return p.ShortenedUrls
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *UrlShortenServiceGetExtendedUrlsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ShortenedUrls =  tSlice
  for i := 0; i < size; i ++ {
var _elem387 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem387 = v
}
    p.ShortenedUrls = append(p.ShortenedUrls, _elem387)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key388 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key388 = v
}
var _val389 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val389 = v
}
    p.Carrier[_key388] = _val389
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetExtendedUrls_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shortened_urls", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shortened_urls: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ShortenedUrls)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ShortenedUrls {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shortened_urls: ", p), err) }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceGetExtendedUrlsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type UrlShortenServiceGetExtendedUrlsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewUrlShortenServiceGetExtendedUrlsResult() *UrlShortenServiceGetExtendedUrlsResult {
  return &UrlShortenServiceGetExtendedUrlsResult{}
}

var UrlShortenServiceGetExtendedUrlsResult_Success_DEFAULT []string

func (p *UrlShortenServiceGetExtendedUrlsResult) GetSuccess() []string {
  return p.Success
}
var UrlShortenServiceGetExtendedUrlsResult_Se_DEFAULT *ServiceException
func (p *UrlShortenServiceGetExtendedUrlsResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return UrlShortenServiceGetExtendedUrlsResult_Se_DEFAULT
  }
return p.Se
}
func (p *UrlShortenServiceGetExtendedUrlsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem390 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem390 = v
}
    p.Success = append(p.Success, _elem390)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetExtendedUrls_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UrlShortenServiceGetExtendedUrlsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *UrlShortenServiceGetExtendedUrlsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UrlShortenServiceGetExtendedUrlsResult(%+v)", *p)
}


type MediaService interface {
  // Parameters:
  //  - ReqID
  //  - MediaTypes
  //  - MediaIds
  //  - Carrier
  ComposeMedia(ctx context.Context, req_id int64, media_types []string, media_ids []int64, carrier map[string]string) (r []*Media, err error)
}

type MediaServiceClient struct {
  c thrift.TClient
}

func NewMediaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MediaServiceClient {
  return &MediaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMediaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MediaServiceClient {
  return &MediaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMediaServiceClient(c thrift.TClient) *MediaServiceClient {
  return &MediaServiceClient{
    c: c,
  }
}

func (p *MediaServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqID
//  - MediaTypes
//  - MediaIds
//  - Carrier
func (p *MediaServiceClient) ComposeMedia(ctx context.Context, req_id int64, media_types []string, media_ids []int64, carrier map[string]string) (r []*Media, err error) {
  var _args417 MediaServiceComposeMediaArgs
  _args417.ReqID = req_id
  _args417.MediaTypes = media_types
  _args417.MediaIds = media_ids
  _args417.Carrier = carrier
  var _result418 MediaServiceComposeMediaResult
  if err = p.Client_().Call(ctx, "ComposeMedia", &_args417, &_result418); err != nil {
    return
  }
  switch {
  case _result418.Se!= nil:
    return r, _result418.Se
  }

  return _result418.GetSuccess(), nil
}

type MediaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MediaService
}

func (p *MediaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MediaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MediaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMediaServiceProcessor(handler MediaService) *MediaServiceProcessor {

  self419 := &MediaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self419.processorMap["ComposeMedia"] = &mediaServiceProcessorComposeMedia{handler:handler}
return self419
}

func (p *MediaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x420 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x420.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x420

}

type mediaServiceProcessorComposeMedia struct {
  handler MediaService
}

func (p *mediaServiceProcessorComposeMedia) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MediaServiceComposeMediaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ComposeMedia", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MediaServiceComposeMediaResult{}
var retval []*Media
  var err2 error
  if retval, err2 = p.handler.ComposeMedia(ctx, args.ReqID, args.MediaTypes, args.MediaIds, args.Carrier); err2 != nil {
  switch v := err2.(type) {
    case *ServiceException:
  result.Se = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ComposeMedia: " + err2.Error())
    oprot.WriteMessageBegin("ComposeMedia", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ComposeMedia", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqID
//  - MediaTypes
//  - MediaIds
//  - Carrier
type MediaServiceComposeMediaArgs struct {
  ReqID int64 `thrift:"req_id,1" db:"req_id" json:"req_id"`
  MediaTypes []string `thrift:"media_types,2" db:"media_types" json:"media_types"`
  MediaIds []int64 `thrift:"media_ids,3" db:"media_ids" json:"media_ids"`
  Carrier map[string]string `thrift:"carrier,4" db:"carrier" json:"carrier"`
}

func NewMediaServiceComposeMediaArgs() *MediaServiceComposeMediaArgs {
  return &MediaServiceComposeMediaArgs{}
}


func (p *MediaServiceComposeMediaArgs) GetReqID() int64 {
  return p.ReqID
}

func (p *MediaServiceComposeMediaArgs) GetMediaTypes() []string {
  return p.MediaTypes
}

func (p *MediaServiceComposeMediaArgs) GetMediaIds() []int64 {
  return p.MediaIds
}

func (p *MediaServiceComposeMediaArgs) GetCarrier() map[string]string {
  return p.Carrier
}
func (p *MediaServiceComposeMediaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MediaTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem421 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem421 = v
}
    p.MediaTypes = append(p.MediaTypes, _elem421)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.MediaIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem422 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem422 = v
}
    p.MediaIds = append(p.MediaIds, _elem422)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Carrier =  tMap
  for i := 0; i < size; i ++ {
var _key423 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key423 = v
}
var _val424 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val424 = v
}
    p.Carrier[_key423] = _val424
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeMedia_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MediaServiceComposeMediaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_types", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:media_types: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.MediaTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaTypes {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:media_types: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("media_ids", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:media_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.MediaIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MediaIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:media_ids: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Carrier)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Carrier {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err) }
  return err
}

func (p *MediaServiceComposeMediaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MediaServiceComposeMediaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Se
type MediaServiceComposeMediaResult struct {
  Success []*Media `thrift:"success,0" db:"success" json:"success,omitempty"`
  Se *ServiceException `thrift:"se,1" db:"se" json:"se,omitempty"`
}

func NewMediaServiceComposeMediaResult() *MediaServiceComposeMediaResult {
  return &MediaServiceComposeMediaResult{}
}

var MediaServiceComposeMediaResult_Success_DEFAULT []*Media

func (p *MediaServiceComposeMediaResult) GetSuccess() []*Media {
  return p.Success
}
var MediaServiceComposeMediaResult_Se_DEFAULT *ServiceException
func (p *MediaServiceComposeMediaResult) GetSe() *ServiceException {
  if !p.IsSetSe() {
    return MediaServiceComposeMediaResult_Se_DEFAULT
  }
return p.Se
}
func (p *MediaServiceComposeMediaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MediaServiceComposeMediaResult) IsSetSe() bool {
  return p.Se != nil
}

func (p *MediaServiceComposeMediaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MediaServiceComposeMediaResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Media, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem425 := &Media{}
    if err := _elem425.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem425), err)
    }
    p.Success = append(p.Success, _elem425)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MediaServiceComposeMediaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Se = &ServiceException{}
  if err := p.Se.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Se), err)
  }
  return nil
}

func (p *MediaServiceComposeMediaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ComposeMedia_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MediaServiceComposeMediaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MediaServiceComposeMediaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSe() {
    if err := oprot.WriteFieldBegin("se", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:se: ", p), err) }
    if err := p.Se.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Se), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:se: ", p), err) }
  }
  return err
}

func (p *MediaServiceComposeMediaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MediaServiceComposeMediaResult(%+v)", *p)
}


